{"ast":null,"code":"import { take } from 'rxjs/operators';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, TemplateRef, forwardRef, EventEmitter, Output, ElementRef, NgZone } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { NgbCalendar } from './ngb-calendar';\nimport { NgbDate } from './ngb-date';\nimport { NgbDatepickerService } from './datepicker-service';\nimport { NgbDatepickerKeyMapService } from './datepicker-keymap-service';\nimport { NavigationEvent } from './datepicker-view-model';\nimport { NgbDatepickerConfig } from './datepicker-config';\nimport { NgbDateAdapter } from './ngb-date-adapter';\nimport { NgbDatepickerI18n } from './datepicker-i18n';\nimport { isChangedDate } from './datepicker-tools';\nvar NGB_DATEPICKER_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return NgbDatepicker;\n  }),\n  multi: true\n};\n/**\n * A lightweight and highly configurable datepicker directive\n */\nvar NgbDatepicker = /** @class */function () {\n  function NgbDatepicker(_keyMapService, _service, _calendar, i18n, config, _cd, _elementRef, _ngbDateAdapter, _ngZone) {\n    var _this = this;\n    this._keyMapService = _keyMapService;\n    this._service = _service;\n    this._calendar = _calendar;\n    this.i18n = i18n;\n    this._cd = _cd;\n    this._elementRef = _elementRef;\n    this._ngbDateAdapter = _ngbDateAdapter;\n    this._ngZone = _ngZone;\n    /**\n       * An event fired when navigation happens and currently displayed month changes.\n       * See NgbDatepickerNavigateEvent for the payload info.\n       */\n    this.navigate = new EventEmitter();\n    /**\n       * An event fired when user selects a date using keyboard or mouse.\n       * The payload of the event is currently selected NgbDateStruct.\n       */\n    this.select = new EventEmitter();\n    this.onChange = function (_) {};\n    this.onTouched = function () {};\n    ['dayTemplate', 'displayMonths', 'firstDayOfWeek', 'markDisabled', 'minDate', 'maxDate', 'navigation', 'outsideDays', 'showWeekdays', 'showWeekNumbers', 'startDate'].forEach(function (input) {\n      return _this[input] = config[input];\n    });\n    this._selectSubscription = _service.select$.subscribe(function (date) {\n      _this.select.emit(date.toStruct());\n    });\n    this._subscription = _service.model$.subscribe(function (model) {\n      var newDate = model.firstDate;\n      var oldDate = _this.model ? _this.model.firstDate : null;\n      var newSelectedDate = model.selectedDate;\n      var oldSelectedDate = _this.model ? _this.model.selectedDate : null;\n      var newFocusedDate = model.focusDate;\n      var oldFocusedDate = _this.model ? _this.model.focusDate : null;\n      _this.model = model;\n      // handling selection change\n      if (isChangedDate(newSelectedDate, oldSelectedDate)) {\n        _this.onTouched();\n        _this.onChange(_this._ngbDateAdapter.toModel(newSelectedDate));\n      }\n      // handling focus change\n      if (isChangedDate(newFocusedDate, oldFocusedDate) && oldFocusedDate && model.focusVisible) {\n        _this.focus();\n      }\n      // emitting navigation event if the first month changes\n      if (!newDate.equals(oldDate)) {\n        _this.navigate.emit({\n          current: oldDate ? {\n            year: oldDate.year,\n            month: oldDate.month\n          } : null,\n          next: {\n            year: newDate.year,\n            month: newDate.month\n          }\n        });\n      }\n      _cd.markForCheck();\n    });\n  }\n  /**\n   * Manually focus the focusable day in the datepicker\n   */\n  /**\n     * Manually focus the focusable day in the datepicker\n     */\n  NgbDatepicker.prototype.focus =\n  /**\n  * Manually focus the focusable day in the datepicker\n  */\n  function () {\n    var _this = this;\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(function () {\n      var elementToFocus = _this._elementRef.nativeElement.querySelector('div.ngb-dp-day[tabindex=\"0\"]');\n      if (elementToFocus) {\n        elementToFocus.focus();\n      }\n    });\n  };\n  /**\n   * Navigates current view to provided date.\n   * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\n   * If nothing or invalid date provided calendar will open current month.\n   * Use 'startDate' input as an alternative\n   */\n  /**\n     * Navigates current view to provided date.\n     * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\n     * If nothing or invalid date provided calendar will open current month.\n     * Use 'startDate' input as an alternative\n     */\n  NgbDatepicker.prototype.navigateTo =\n  /**\n  * Navigates current view to provided date.\n  * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\n  * If nothing or invalid date provided calendar will open current month.\n  * Use 'startDate' input as an alternative\n  */\n  function (date) {\n    this._service.open(NgbDate.from(date));\n  };\n  NgbDatepicker.prototype.ngOnDestroy = function () {\n    this._subscription.unsubscribe();\n    this._selectSubscription.unsubscribe();\n  };\n  NgbDatepicker.prototype.ngOnInit = function () {\n    var _this = this;\n    if (this.model === undefined) {\n      ['displayMonths', 'markDisabled', 'firstDayOfWeek', 'navigation', 'minDate', 'maxDate'].forEach(function (input) {\n        return _this._service[input] = _this[input];\n      });\n      this.navigateTo(this.startDate);\n    }\n  };\n  NgbDatepicker.prototype.ngOnChanges = function (changes) {\n    var _this = this;\n    ['displayMonths', 'markDisabled', 'firstDayOfWeek', 'navigation', 'minDate', 'maxDate'].filter(function (input) {\n      return input in changes;\n    }).forEach(function (input) {\n      return _this._service[input] = _this[input];\n    });\n    if ('startDate' in changes) {\n      this.navigateTo(this.startDate);\n    }\n  };\n  NgbDatepicker.prototype.onDateSelect = function (date) {\n    this._service.focus(date);\n    this._service.select(date, {\n      emitEvent: true\n    });\n  };\n  NgbDatepicker.prototype.onKeyDown = function (event) {\n    this._keyMapService.processKey(event);\n  };\n  NgbDatepicker.prototype.onNavigateDateSelect = function (date) {\n    this._service.open(date);\n  };\n  NgbDatepicker.prototype.onNavigateEvent = function (event) {\n    switch (event) {\n      case NavigationEvent.PREV:\n        this._service.open(this._calendar.getPrev(this.model.firstDate, 'm', 1));\n        break;\n      case NavigationEvent.NEXT:\n        this._service.open(this._calendar.getNext(this.model.firstDate, 'm', 1));\n        break;\n    }\n  };\n  NgbDatepicker.prototype.registerOnChange = function (fn) {\n    this.onChange = fn;\n  };\n  NgbDatepicker.prototype.registerOnTouched = function (fn) {\n    this.onTouched = fn;\n  };\n  NgbDatepicker.prototype.setDisabledState = function (isDisabled) {\n    this._service.disabled = isDisabled;\n  };\n  NgbDatepicker.prototype.showFocus = function (focusVisible) {\n    this._service.focusVisible = focusVisible;\n  };\n  NgbDatepicker.prototype.writeValue = function (value) {\n    this._service.select(NgbDate.from(this._ngbDateAdapter.fromModel(value)));\n  };\n  NgbDatepicker.decorators = [{\n    type: Component,\n    args: [{\n      exportAs: 'ngbDatepicker',\n      selector: 'ngb-datepicker',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\"\\n    :host {\\n      border: 1px solid rgba(0, 0, 0, 0.125);\\n      border-radius: 0.25rem;\\n      display: inline-block;\\n    }\\n    .ngb-dp-month {\\n      pointer-events: none;\\n    }\\n    .ngb-dp-header {\\n      border-bottom: 0px;\\n      border-radius: .25rem 0.25rem 0rem 0rem;\\n      padding-top: 0.25rem;\\n    }\\n    ngb-datepicker-month-view {\\n      pointer-events: auto;\\n    }\\n    .ngb-dp-month-name {\\n      font-size: larger;\\n      height: 2rem;\\n      line-height: 2rem;\\n      text-align: center;\\n    }\\n    /deep/ .ngb-dp-month + .ngb-dp-month > ngb-datepicker-month-view > .ngb-dp-week {\\n      padding-left: 1rem;\\n    }\\n    /deep/ .ngb-dp-month + .ngb-dp-month > .ngb-dp-month-name {\\n      padding-left: 1rem;\\n    }\\n    /deep/ .ngb-dp-month:last-child .ngb-dp-week {\\n      padding-right: .25rem;\\n    }\\n    /deep/ .ngb-dp-month:first-child .ngb-dp-week {\\n      padding-left: .25rem;\\n    }\\n    /deep/ .ngb-dp-month > ngb-datepicker-month-view > .ngb-dp-week:last-child {\\n      padding-bottom: .25rem;\\n    }\\n    .ngb-dp-months {\\n      display: -webkit-box;\\n      display: -ms-flexbox;\\n      display: flex;\\n    }\\n  \"],\n      template: \"\\n    <ng-template #dt let-date=\\\"date\\\" let-currentMonth=\\\"currentMonth\\\" let-selected=\\\"selected\\\" let-disabled=\\\"disabled\\\" let-focused=\\\"focused\\\">\\n      <div ngbDatepickerDayView\\n        [date]=\\\"date\\\"\\n        [currentMonth]=\\\"currentMonth\\\"\\n        [selected]=\\\"selected\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [focused]=\\\"focused\\\">\\n      </div>\\n    </ng-template>\\n\\n    <div class=\\\"ngb-dp-header bg-light\\\">\\n      <ngb-datepicker-navigation *ngIf=\\\"navigation !== 'none'\\\"\\n        [date]=\\\"model.firstDate\\\"\\n        [months]=\\\"model.months\\\"\\n        [disabled]=\\\"model.disabled\\\"\\n        [showSelect]=\\\"model.navigation === 'select'\\\"\\n        [prevDisabled]=\\\"model.prevDisabled\\\"\\n        [nextDisabled]=\\\"model.nextDisabled\\\"\\n        [selectBoxes]=\\\"model.selectBoxes\\\"\\n        (navigate)=\\\"onNavigateEvent($event)\\\"\\n        (select)=\\\"onNavigateDateSelect($event)\\\">\\n      </ngb-datepicker-navigation>\\n    </div>\\n\\n    <div class=\\\"ngb-dp-months\\\" (keydown)=\\\"onKeyDown($event)\\\" (focusin)=\\\"showFocus(true)\\\" (focusout)=\\\"showFocus(false)\\\">\\n      <ng-template ngFor let-month [ngForOf]=\\\"model.months\\\" let-i=\\\"index\\\">\\n        <div class=\\\"ngb-dp-month d-block\\\">\\n          <div *ngIf=\\\"navigation === 'none' || (displayMonths > 1 && navigation === 'select')\\\"\\n                class=\\\"ngb-dp-month-name bg-light\\\">\\n            {{ i18n.getMonthFullName(month.number) }} {{ month.year }}\\n          </div>\\n          <ngb-datepicker-month-view\\n            [month]=\\\"month\\\"\\n            [dayTemplate]=\\\"dayTemplate || dt\\\"\\n            [showWeekdays]=\\\"showWeekdays\\\"\\n            [showWeekNumbers]=\\\"showWeekNumbers\\\"\\n            [outsideDays]=\\\"(displayMonths === 1 ? outsideDays : 'hidden')\\\"\\n            (select)=\\\"onDateSelect($event)\\\">\\n          </ngb-datepicker-month-view>\\n        </div>\\n      </ng-template>\\n    </div>\\n  \",\n      providers: [NGB_DATEPICKER_VALUE_ACCESSOR, NgbDatepickerService, NgbDatepickerKeyMapService]\n    }]\n  }];\n  /** @nocollapse */\n  NgbDatepicker.ctorParameters = function () {\n    return [{\n      type: NgbDatepickerKeyMapService\n    }, {\n      type: NgbDatepickerService\n    }, {\n      type: NgbCalendar\n    }, {\n      type: NgbDatepickerI18n\n    }, {\n      type: NgbDatepickerConfig\n    }, {\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgbDateAdapter\n    }, {\n      type: NgZone\n    }];\n  };\n  NgbDatepicker.propDecorators = {\n    \"dayTemplate\": [{\n      type: Input\n    }],\n    \"displayMonths\": [{\n      type: Input\n    }],\n    \"firstDayOfWeek\": [{\n      type: Input\n    }],\n    \"markDisabled\": [{\n      type: Input\n    }],\n    \"maxDate\": [{\n      type: Input\n    }],\n    \"minDate\": [{\n      type: Input\n    }],\n    \"navigation\": [{\n      type: Input\n    }],\n    \"outsideDays\": [{\n      type: Input\n    }],\n    \"showWeekdays\": [{\n      type: Input\n    }],\n    \"showWeekNumbers\": [{\n      type: Input\n    }],\n    \"startDate\": [{\n      type: Input\n    }],\n    \"navigate\": [{\n      type: Output\n    }],\n    \"select\": [{\n      type: Output\n    }]\n  };\n  return NgbDatepicker;\n}();\nexport { NgbDatepicker };\n//# sourceMappingURL=datepicker.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}