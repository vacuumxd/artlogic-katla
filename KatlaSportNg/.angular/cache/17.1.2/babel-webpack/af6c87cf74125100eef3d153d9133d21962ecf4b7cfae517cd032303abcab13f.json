{"ast":null,"code":"import { Component, Input, ContentChildren, QueryList, Directive, TemplateRef, Output, EventEmitter } from '@angular/core';\nimport { NgbTabsetConfig } from './tabset-config';\nvar nextId = 0;\n/**\n * This directive should be used to wrap tab titles that need to contain HTML markup or other directives.\n */\nvar NgbTabTitle = /** @class */function () {\n  function NgbTabTitle(templateRef) {\n    this.templateRef = templateRef;\n  }\n  NgbTabTitle.decorators = [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[ngbTabTitle]'\n    }]\n  }];\n  /** @nocollapse */\n  NgbTabTitle.ctorParameters = function () {\n    return [{\n      type: TemplateRef\n    }];\n  };\n  return NgbTabTitle;\n}();\nexport { NgbTabTitle };\n/**\n * This directive must be used to wrap content to be displayed in a tab.\n */\nvar NgbTabContent = /** @class */function () {\n  function NgbTabContent(templateRef) {\n    this.templateRef = templateRef;\n  }\n  NgbTabContent.decorators = [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[ngbTabContent]'\n    }]\n  }];\n  /** @nocollapse */\n  NgbTabContent.ctorParameters = function () {\n    return [{\n      type: TemplateRef\n    }];\n  };\n  return NgbTabContent;\n}();\nexport { NgbTabContent };\n/**\n * A directive representing an individual tab.\n */\nvar NgbTab = /** @class */function () {\n  function NgbTab() {\n    /**\n       * Unique tab identifier. Must be unique for the entire document for proper accessibility support.\n       */\n    this.id = \"ngb-tab-\" + nextId++;\n    /**\n       * Allows toggling disabled state of a given state. Disabled tabs can't be selected.\n       */\n    this.disabled = false;\n  }\n  NgbTab.prototype.ngAfterContentChecked = function () {\n    // We are using @ContentChildren instead of @ContantChild as in the Angular version being used\n    // only @ContentChildren allows us to specify the {descendants: false} option.\n    // Without {descendants: false} we are hitting bugs described in:\n    // https://github.com/ng-bootstrap/ng-bootstrap/issues/2240\n    this.titleTpl = this.titleTpls.first;\n    this.contentTpl = this.contentTpls.first;\n  };\n  NgbTab.decorators = [{\n    type: Directive,\n    args: [{\n      selector: 'ngb-tab'\n    }]\n  }];\n  /** @nocollapse */\n  NgbTab.propDecorators = {\n    \"id\": [{\n      type: Input\n    }],\n    \"title\": [{\n      type: Input\n    }],\n    \"disabled\": [{\n      type: Input\n    }],\n    \"titleTpls\": [{\n      type: ContentChildren,\n      args: [NgbTabTitle, {\n        descendants: false\n      }]\n    }],\n    \"contentTpls\": [{\n      type: ContentChildren,\n      args: [NgbTabContent, {\n        descendants: false\n      }]\n    }]\n  };\n  return NgbTab;\n}();\nexport { NgbTab };\n/**\n * A component that makes it easy to create tabbed interface.\n */\nvar NgbTabset = /** @class */function () {\n  function NgbTabset(config) {\n    /**\n       * Whether the closed tabs should be hidden without destroying them\n       */\n    this.destroyOnHide = true;\n    /**\n       * A tab change event fired right before the tab selection happens. See NgbTabChangeEvent for payload details\n       */\n    this.tabChange = new EventEmitter();\n    this.type = config.type;\n    this.justify = config.justify;\n    this.orientation = config.orientation;\n  }\n  Object.defineProperty(NgbTabset.prototype, \"justify\", {\n    set:\n    /**\n    * The horizontal alignment of the nav with flexbox utilities. Can be one of 'start', 'center', 'end', 'fill' or\n    * 'justified'\n    * The default value is 'start'.\n    */\n    function (className) {\n      if (className === 'fill' || className === 'justified') {\n        this.justifyClass = \"nav-\" + className;\n      } else {\n        this.justifyClass = \"justify-content-\" + className;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Selects the tab with the given id and shows its associated pane.\n   * Any other tab that was previously selected becomes unselected and its associated pane is hidden.\n   */\n  /**\n     * Selects the tab with the given id and shows its associated pane.\n     * Any other tab that was previously selected becomes unselected and its associated pane is hidden.\n     */\n  NgbTabset.prototype.select =\n  /**\n  * Selects the tab with the given id and shows its associated pane.\n  * Any other tab that was previously selected becomes unselected and its associated pane is hidden.\n  */\n  function (tabId) {\n    var selectedTab = this._getTabById(tabId);\n    if (selectedTab && !selectedTab.disabled && this.activeId !== selectedTab.id) {\n      var defaultPrevented_1 = false;\n      this.tabChange.emit({\n        activeId: this.activeId,\n        nextId: selectedTab.id,\n        preventDefault: function () {\n          defaultPrevented_1 = true;\n        }\n      });\n      if (!defaultPrevented_1) {\n        this.activeId = selectedTab.id;\n      }\n    }\n  };\n  NgbTabset.prototype.ngAfterContentChecked = function () {\n    // auto-correct activeId that might have been set incorrectly as input\n    var activeTab = this._getTabById(this.activeId);\n    this.activeId = activeTab ? activeTab.id : this.tabs.length ? this.tabs.first.id : null;\n  };\n  NgbTabset.prototype._getTabById = function (id) {\n    var tabsWithId = this.tabs.filter(function (tab) {\n      return tab.id === id;\n    });\n    return tabsWithId.length ? tabsWithId[0] : null;\n  };\n  NgbTabset.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'ngb-tabset',\n      exportAs: 'ngbTabset',\n      template: \"\\n    <ul [class]=\\\"'nav nav-' + type + (orientation == 'horizontal'?  ' ' + justifyClass : ' flex-column')\\\" role=\\\"tablist\\\">\\n      <li class=\\\"nav-item\\\" *ngFor=\\\"let tab of tabs\\\">\\n        <a [id]=\\\"tab.id\\\" class=\\\"nav-link\\\" [class.active]=\\\"tab.id === activeId\\\" [class.disabled]=\\\"tab.disabled\\\"\\n          href (click)=\\\"!!select(tab.id)\\\" role=\\\"tab\\\" [attr.tabindex]=\\\"(tab.disabled ? '-1': undefined)\\\"\\n          [attr.aria-controls]=\\\"(!destroyOnHide || tab.id === activeId ? tab.id + '-panel' : null)\\\"\\n          [attr.aria-expanded]=\\\"tab.id === activeId\\\" [attr.aria-disabled]=\\\"tab.disabled\\\">\\n          {{tab.title}}<ng-template [ngTemplateOutlet]=\\\"tab.titleTpl?.templateRef\\\"></ng-template>\\n        </a>\\n      </li>\\n    </ul>\\n    <div class=\\\"tab-content\\\">\\n      <ng-template ngFor let-tab [ngForOf]=\\\"tabs\\\">\\n        <div\\n          class=\\\"tab-pane {{tab.id === activeId ? 'active' : null}}\\\"\\n          *ngIf=\\\"!destroyOnHide || tab.id === activeId\\\"\\n          role=\\\"tabpanel\\\"\\n          [attr.aria-labelledby]=\\\"tab.id\\\" id=\\\"{{tab.id}}-panel\\\"\\n          [attr.aria-expanded]=\\\"tab.id === activeId\\\">\\n          <ng-template [ngTemplateOutlet]=\\\"tab.contentTpl?.templateRef\\\"></ng-template>\\n        </div>\\n      </ng-template>\\n    </div>\\n  \"\n    }]\n  }];\n  /** @nocollapse */\n  NgbTabset.ctorParameters = function () {\n    return [{\n      type: NgbTabsetConfig\n    }];\n  };\n  NgbTabset.propDecorators = {\n    \"tabs\": [{\n      type: ContentChildren,\n      args: [NgbTab]\n    }],\n    \"activeId\": [{\n      type: Input\n    }],\n    \"destroyOnHide\": [{\n      type: Input\n    }],\n    \"justify\": [{\n      type: Input\n    }],\n    \"orientation\": [{\n      type: Input\n    }],\n    \"type\": [{\n      type: Input\n    }],\n    \"tabChange\": [{\n      type: Output\n    }]\n  };\n  return NgbTabset;\n}();\nexport { NgbTabset };\n//# sourceMappingURL=tabset.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}