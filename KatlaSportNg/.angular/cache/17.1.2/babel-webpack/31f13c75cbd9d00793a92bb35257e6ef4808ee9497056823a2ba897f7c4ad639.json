{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { NgbCalendar } from '../ngb-calendar';\nimport { Injectable } from '@angular/core';\nimport { isNumber } from '../../util/util';\nvar NgbCalendarHijri = /** @class */function (_super) {\n  __extends(NgbCalendarHijri, _super);\n  function NgbCalendarHijri() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  NgbCalendarHijri.prototype.getDaysPerWeek = function () {\n    return 7;\n  };\n  NgbCalendarHijri.prototype.getMonths = function () {\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n  };\n  NgbCalendarHijri.prototype.getWeeksPerMonth = function () {\n    return 6;\n  };\n  NgbCalendarHijri.prototype.isValid = function (date) {\n    return date && isNumber(date.year) && isNumber(date.month) && isNumber(date.day) && !isNaN(this.toGregorian(date).getTime());\n  };\n  NgbCalendarHijri.prototype.setDay = function (date, day) {\n    day = +day;\n    var mDays = this.getDaysInIslamicMonth(date.month, date.year);\n    if (day <= 0) {\n      while (day <= 0) {\n        date = this.setMonth(date, date.month - 1);\n        mDays = this.getDaysInIslamicMonth(date.month, date.year);\n        day += mDays;\n      }\n    } else if (day > mDays) {\n      while (day > mDays) {\n        day -= mDays;\n        date = this.setMonth(date, date.month + 1);\n        mDays = this.getDaysInIslamicMonth(date.month, date.year);\n      }\n    }\n    date.day = day;\n    return date;\n  };\n  NgbCalendarHijri.prototype.setMonth = function (date, month) {\n    month = +month;\n    date.year = date.year + Math.floor((month - 1) / 12);\n    date.month = Math.floor(((month - 1) % 12 + 12) % 12) + 1;\n    return date;\n  };\n  NgbCalendarHijri.prototype.setYear = function (date, yearValue) {\n    date.year = +yearValue;\n    return date;\n  };\n  NgbCalendarHijri.prototype._isIslamicLeapYear = function (year) {\n    return (14 + 11 * year) % 30 < 11;\n  };\n  /**\n   * Returns the start of Hijri Month.\n   * `month` is 0 for Muharram, 1 for Safar, etc.\n   * `year` is any Hijri year.\n   */\n  /**\n     * Returns the start of Hijri Month.\n     * `month` is 0 for Muharram, 1 for Safar, etc.\n     * `year` is any Hijri year.\n     */\n  NgbCalendarHijri.prototype._getMonthStart =\n  /**\n  * Returns the start of Hijri Month.\n  * `month` is 0 for Muharram, 1 for Safar, etc.\n  * `year` is any Hijri year.\n  */\n  function (year, month) {\n    return Math.ceil(29.5 * month) + (year - 1) * 354 + Math.floor((3 + 11 * year) / 30.0);\n  };\n  /**\n   * Returns the start of Hijri year.\n   * `year` is any Hijri year.\n   */\n  /**\n     * Returns the start of Hijri year.\n     * `year` is any Hijri year.\n     */\n  NgbCalendarHijri.prototype._getYearStart =\n  /**\n  * Returns the start of Hijri year.\n  * `year` is any Hijri year.\n  */\n  function (year) {\n    return (year - 1) * 354 + Math.floor((3 + 11 * year) / 30.0);\n  };\n  NgbCalendarHijri.decorators = [{\n    type: Injectable\n  }];\n  return NgbCalendarHijri;\n}(NgbCalendar);\nexport { NgbCalendarHijri };\n//# sourceMappingURL=ngb-calendar-hijri.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}