{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { Injectable } from '@angular/core';\n/**\n * Abstract type serving as a DI token for the service converting from your application Date model to internal\n * NgbDateStruct model.\n * A default implementation converting from and to NgbDateStruct is provided for retro-compatibility,\n * but you can provide another implementation to use an alternative format, ie for using with native Date Object.\n */\nvar NgbDateAdapter = /** @class */function () {\n  function NgbDateAdapter() {}\n  NgbDateAdapter.decorators = [{\n    type: Injectable\n  }];\n  return NgbDateAdapter;\n}();\nexport { NgbDateAdapter };\nvar NgbDateStructAdapter = /** @class */function (_super) {\n  __extends(NgbDateStructAdapter, _super);\n  function NgbDateStructAdapter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Converts a NgbDateStruct value into NgbDateStruct value\n   * @param  {NgbDateStruct} value\n   * @return {NgbDateStruct}\n   */\n  /**\n     * Converts a NgbDateStruct value into NgbDateStruct value\n     * @param  {NgbDateStruct} value\n     * @return {NgbDateStruct}\n     */\n  NgbDateStructAdapter.prototype.fromModel =\n  /**\n  * Converts a NgbDateStruct value into NgbDateStruct value\n  * @param  {NgbDateStruct} value\n  * @return {NgbDateStruct}\n  */\n  function (date) {\n    return date && date.year && date.month && date.day ? {\n      year: date.year,\n      month: date.month,\n      day: date.day\n    } : null;\n  };\n  /**\n   * Converts a NgbDateStruct value into NgbDateStruct value\n   * @param  {NgbDateStruct} value\n   * @return {NgbDateStruct}\n   */\n  /**\n     * Converts a NgbDateStruct value into NgbDateStruct value\n     * @param  {NgbDateStruct} value\n     * @return {NgbDateStruct}\n     */\n  NgbDateStructAdapter.prototype.toModel =\n  /**\n  * Converts a NgbDateStruct value into NgbDateStruct value\n  * @param  {NgbDateStruct} value\n  * @return {NgbDateStruct}\n  */\n  function (date) {\n    return date && date.year && date.month && date.day ? {\n      year: date.year,\n      month: date.month,\n      day: date.day\n    } : null;\n  };\n  NgbDateStructAdapter.decorators = [{\n    type: Injectable\n  }];\n  return NgbDateStructAdapter;\n}(NgbDateAdapter);\nexport { NgbDateStructAdapter };\n//# sourceMappingURL=ngb-date-adapter.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}