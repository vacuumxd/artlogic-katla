{"ast":null,"code":"import { Component, ContentChildren, Directive, EventEmitter, Input, Output, QueryList, TemplateRef } from '@angular/core';\nimport { isString } from '../util/util';\nimport { NgbAccordionConfig } from './accordion-config';\nvar nextId = 0;\n/**\n * This directive should be used to wrap accordion panel titles that need to contain HTML markup or other directives.\n */\nvar NgbPanelTitle = /** @class */function () {\n  function NgbPanelTitle(templateRef) {\n    this.templateRef = templateRef;\n  }\n  NgbPanelTitle.decorators = [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[ngbPanelTitle]'\n    }]\n  }];\n  /** @nocollapse */\n  NgbPanelTitle.ctorParameters = function () {\n    return [{\n      type: TemplateRef\n    }];\n  };\n  return NgbPanelTitle;\n}();\nexport { NgbPanelTitle };\n/**\n * This directive must be used to wrap accordion panel content.\n */\nvar NgbPanelContent = /** @class */function () {\n  function NgbPanelContent(templateRef) {\n    this.templateRef = templateRef;\n  }\n  NgbPanelContent.decorators = [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[ngbPanelContent]'\n    }]\n  }];\n  /** @nocollapse */\n  NgbPanelContent.ctorParameters = function () {\n    return [{\n      type: TemplateRef\n    }];\n  };\n  return NgbPanelContent;\n}();\nexport { NgbPanelContent };\n/**\n * The NgbPanel directive represents an individual panel with the title and collapsible\n * content\n */\nvar NgbPanel = /** @class */function () {\n  function NgbPanel() {\n    /**\n       *  A flag determining whether the panel is disabled or not.\n       *  When disabled, the panel cannot be toggled.\n       */\n    this.disabled = false;\n    /**\n       *  An optional id for the panel. The id should be unique.\n       *  If not provided, it will be auto-generated.\n       */\n    this.id = \"ngb-panel-\" + nextId++;\n    /**\n       * A flag telling if the panel is currently open\n       */\n    this.isOpen = false;\n  }\n  NgbPanel.prototype.ngAfterContentChecked = function () {\n    // We are using @ContentChildren instead of @ContantChild as in the Angular version being used\n    // only @ContentChildren allows us to specify the {descendants: false} option.\n    // Without {descendants: false} we are hitting bugs described in:\n    // https://github.com/ng-bootstrap/ng-bootstrap/issues/2240\n    this.titleTpl = this.titleTpls.first;\n    this.contentTpl = this.contentTpls.first;\n  };\n  NgbPanel.decorators = [{\n    type: Directive,\n    args: [{\n      selector: 'ngb-panel'\n    }]\n  }];\n  /** @nocollapse */\n  NgbPanel.propDecorators = {\n    \"disabled\": [{\n      type: Input\n    }],\n    \"id\": [{\n      type: Input\n    }],\n    \"title\": [{\n      type: Input\n    }],\n    \"type\": [{\n      type: Input\n    }],\n    \"titleTpls\": [{\n      type: ContentChildren,\n      args: [NgbPanelTitle, {\n        descendants: false\n      }]\n    }],\n    \"contentTpls\": [{\n      type: ContentChildren,\n      args: [NgbPanelContent, {\n        descendants: false\n      }]\n    }]\n  };\n  return NgbPanel;\n}();\nexport { NgbPanel };\n/**\n * The NgbAccordion directive is a collection of panels.\n * It can assure that only one panel can be opened at a time.\n */\nvar NgbAccordion = /** @class */function () {\n  function NgbAccordion(config) {\n    /**\n       * An array or comma separated strings of panel identifiers that should be opened\n       */\n    this.activeIds = [];\n    /**\n       * Whether the closed panels should be hidden without destroying them\n       */\n    this.destroyOnHide = true;\n    /**\n       * A panel change event fired right before the panel toggle happens. See NgbPanelChangeEvent for payload details\n       */\n    this.panelChange = new EventEmitter();\n    this.type = config.type;\n    this.closeOtherPanels = config.closeOthers;\n  }\n  /**\n   * Programmatically toggle a panel with a given id.\n   */\n  /**\n     * Programmatically toggle a panel with a given id.\n     */\n  NgbAccordion.prototype.toggle =\n  /**\n  * Programmatically toggle a panel with a given id.\n  */\n  function (panelId) {\n    var panel = this.panels.find(function (p) {\n      return p.id === panelId;\n    });\n    if (panel && !panel.disabled) {\n      var defaultPrevented_1 = false;\n      this.panelChange.emit({\n        panelId: panelId,\n        nextState: !panel.isOpen,\n        preventDefault: function () {\n          defaultPrevented_1 = true;\n        }\n      });\n      if (!defaultPrevented_1) {\n        panel.isOpen = !panel.isOpen;\n        if (this.closeOtherPanels) {\n          this._closeOthers(panelId);\n        }\n        this._updateActiveIds();\n      }\n    }\n  };\n  NgbAccordion.prototype.ngAfterContentChecked = function () {\n    var _this = this;\n    // active id updates\n    if (isString(this.activeIds)) {\n      this.activeIds = this.activeIds.split(/\\s*,\\s*/);\n    }\n    // update panels open states\n    this.panels.forEach(function (panel) {\n      return panel.isOpen = !panel.disabled && _this.activeIds.indexOf(panel.id) > -1;\n    });\n    // closeOthers updates\n    if (this.activeIds.length > 1 && this.closeOtherPanels) {\n      this._closeOthers(this.activeIds[0]);\n      this._updateActiveIds();\n    }\n  };\n  NgbAccordion.prototype._closeOthers = function (panelId) {\n    this.panels.forEach(function (panel) {\n      if (panel.id !== panelId) {\n        panel.isOpen = false;\n      }\n    });\n  };\n  NgbAccordion.prototype._updateActiveIds = function () {\n    this.activeIds = this.panels.filter(function (panel) {\n      return panel.isOpen && !panel.disabled;\n    }).map(function (panel) {\n      return panel.id;\n    });\n  };\n  NgbAccordion.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'ngb-accordion',\n      exportAs: 'ngbAccordion',\n      host: {\n        'class': 'accordion',\n        'role': 'tablist',\n        '[attr.aria-multiselectable]': '!closeOtherPanels'\n      },\n      template: \"\\n    <ng-template ngFor let-panel [ngForOf]=\\\"panels\\\">\\n      <div class=\\\"card\\\">\\n        <div role=\\\"tab\\\" id=\\\"{{panel.id}}-header\\\" [class]=\\\"'card-header ' + (panel.type ? 'bg-'+panel.type: type ? 'bg-'+type : '')\\\">\\n          <a href (click)=\\\"!!toggle(panel.id)\\\" [class.text-muted]=\\\"panel.disabled\\\" [attr.tabindex]=\\\"(panel.disabled ? '-1' : null)\\\"\\n            [attr.aria-expanded]=\\\"panel.isOpen\\\" [attr.aria-controls]=\\\"(panel.isOpen ? panel.id : null)\\\"\\n            [attr.aria-disabled]=\\\"panel.disabled\\\">\\n            {{panel.title}}<ng-template [ngTemplateOutlet]=\\\"panel.titleTpl?.templateRef\\\"></ng-template>\\n          </a>\\n        </div>\\n        <div id=\\\"{{panel.id}}\\\" role=\\\"tabpanel\\\" [attr.aria-labelledby]=\\\"panel.id + '-header'\\\"\\n             class=\\\"card-body collapse {{panel.isOpen ? 'show' : null}}\\\" *ngIf=\\\"!destroyOnHide || panel.isOpen\\\">\\n             <ng-template [ngTemplateOutlet]=\\\"panel.contentTpl?.templateRef\\\"></ng-template>\\n        </div>\\n      </div>\\n    </ng-template>\\n  \"\n    }]\n  }];\n  /** @nocollapse */\n  NgbAccordion.ctorParameters = function () {\n    return [{\n      type: NgbAccordionConfig\n    }];\n  };\n  NgbAccordion.propDecorators = {\n    \"panels\": [{\n      type: ContentChildren,\n      args: [NgbPanel]\n    }],\n    \"activeIds\": [{\n      type: Input\n    }],\n    \"closeOtherPanels\": [{\n      type: Input,\n      args: ['closeOthers']\n    }],\n    \"destroyOnHide\": [{\n      type: Input\n    }],\n    \"type\": [{\n      type: Input\n    }],\n    \"panelChange\": [{\n      type: Output\n    }]\n  };\n  return NgbAccordion;\n}();\nexport { NgbAccordion };\n//# sourceMappingURL=accordion.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}