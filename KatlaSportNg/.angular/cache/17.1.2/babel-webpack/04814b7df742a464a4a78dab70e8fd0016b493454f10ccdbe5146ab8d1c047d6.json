{"ast":null,"code":"import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';\nimport { NgbAlertConfig } from './alert-config';\n/**\n * Alerts can be used to provide feedback messages.\n */\nvar NgbAlert = /** @class */function () {\n  function NgbAlert(config) {\n    /**\n       * An event emitted when the close button is clicked. This event has no payload. Only relevant for dismissible alerts.\n       */\n    this.close = new EventEmitter();\n    this.dismissible = config.dismissible;\n    this.type = config.type;\n  }\n  NgbAlert.prototype.closeHandler = function () {\n    this.close.emit(null);\n  };\n  NgbAlert.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'ngb-alert',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"\\n    <div [class]=\\\"'alert alert-' + type + (dismissible ? ' alert-dismissible' : '')\\\" role=\\\"alert\\\">\\n      <button *ngIf=\\\"dismissible\\\" type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\" (click)=\\\"closeHandler()\\\">\\n            <span aria-hidden=\\\"true\\\">&times;</span>\\n      </button>\\n      <ng-content></ng-content>\\n    </div>\\n    \"\n    }]\n  }];\n  /** @nocollapse */\n  NgbAlert.ctorParameters = function () {\n    return [{\n      type: NgbAlertConfig\n    }];\n  };\n  NgbAlert.propDecorators = {\n    \"dismissible\": [{\n      type: Input\n    }],\n    \"type\": [{\n      type: Input\n    }],\n    \"close\": [{\n      type: Output\n    }]\n  };\n  return NgbAlert;\n}();\nexport { NgbAlert };\n//# sourceMappingURL=alert.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}