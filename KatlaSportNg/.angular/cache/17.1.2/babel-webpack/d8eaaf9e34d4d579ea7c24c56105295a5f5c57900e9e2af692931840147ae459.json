{"ast":null,"code":"import { Injectable, Injector, ComponentFactoryResolver } from '@angular/core';\nimport { NgbModalStack } from './modal-stack';\n/**\n * A service to open modal windows. Creating a modal is straightforward: create a template and pass it as an argument to\n * the \"open\" method!\n */\nvar NgbModal = /** @class */function () {\n  function NgbModal(_moduleCFR, _injector, _modalStack) {\n    this._moduleCFR = _moduleCFR;\n    this._injector = _injector;\n    this._modalStack = _modalStack;\n  }\n  /**\n   * Opens a new modal window with the specified content and using supplied options. Content can be provided\n   * as a TemplateRef or a component type. If you pass a component type as content than instances of those\n   * components can be injected with an instance of the NgbActiveModal class. You can use methods on the\n   * NgbActiveModal class to close / dismiss modals from \"inside\" of a component.\n   */\n  /**\n     * Opens a new modal window with the specified content and using supplied options. Content can be provided\n     * as a TemplateRef or a component type. If you pass a component type as content than instances of those\n     * components can be injected with an instance of the NgbActiveModal class. You can use methods on the\n     * NgbActiveModal class to close / dismiss modals from \"inside\" of a component.\n     */\n  NgbModal.prototype.open =\n  /**\n  * Opens a new modal window with the specified content and using supplied options. Content can be provided\n  * as a TemplateRef or a component type. If you pass a component type as content than instances of those\n  * components can be injected with an instance of the NgbActiveModal class. You can use methods on the\n  * NgbActiveModal class to close / dismiss modals from \"inside\" of a component.\n  */\n  function (content, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    return this._modalStack.open(this._moduleCFR, this._injector, content, options);\n  };\n  NgbModal.decorators = [{\n    type: Injectable\n  }];\n  /** @nocollapse */\n  NgbModal.ctorParameters = function () {\n    return [{\n      type: ComponentFactoryResolver\n    }, {\n      type: Injector\n    }, {\n      type: NgbModalStack\n    }];\n  };\n  return NgbModal;\n}();\nexport { NgbModal };\n//# sourceMappingURL=modal.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}