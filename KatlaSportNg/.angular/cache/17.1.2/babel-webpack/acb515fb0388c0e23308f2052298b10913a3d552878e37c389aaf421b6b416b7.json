{"ast":null,"code":"import { Component, Directive, TemplateRef, ContentChildren, QueryList, Input, Output, EventEmitter } from '@angular/core';\nimport { NgbCarouselConfig } from './carousel-config';\nvar nextId = 0;\n/**\n * Represents an individual slide to be used within a carousel.\n */\nvar NgbSlide = /** @class */function () {\n  function NgbSlide(tplRef) {\n    this.tplRef = tplRef;\n    /**\n       * Unique slide identifier. Must be unique for the entire document for proper accessibility support.\n       * Will be auto-generated if not provided.\n       */\n    this.id = \"ngb-slide-\" + nextId++;\n  }\n  NgbSlide.decorators = [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[ngbSlide]'\n    }]\n  }];\n  /** @nocollapse */\n  NgbSlide.ctorParameters = function () {\n    return [{\n      type: TemplateRef\n    }];\n  };\n  NgbSlide.propDecorators = {\n    \"id\": [{\n      type: Input\n    }]\n  };\n  return NgbSlide;\n}();\nexport { NgbSlide };\n/**\n * Directive to easily create carousels based on Bootstrap's markup.\n */\nvar NgbCarousel = /** @class */function () {\n  function NgbCarousel(config) {\n    /**\n       * A carousel slide event fired when the slide transition is completed.\n       * See NgbSlideEvent for payload details\n       */\n    this.slide = new EventEmitter();\n    this.interval = config.interval;\n    this.wrap = config.wrap;\n    this.keyboard = config.keyboard;\n  }\n  NgbCarousel.prototype.ngAfterContentChecked = function () {\n    var activeSlide = this._getSlideById(this.activeId);\n    this.activeId = activeSlide ? activeSlide.id : this.slides.length ? this.slides.first.id : null;\n  };\n  NgbCarousel.prototype.ngOnInit = function () {\n    this._startTimer();\n  };\n  NgbCarousel.prototype.ngOnChanges = function (changes) {\n    if ('interval' in changes && !changes['interval'].isFirstChange()) {\n      this._restartTimer();\n    }\n  };\n  NgbCarousel.prototype.ngOnDestroy = function () {\n    clearInterval(this._slideChangeInterval);\n  };\n  /**\n   * Navigate to a slide with the specified identifier.\n   */\n  /**\n     * Navigate to a slide with the specified identifier.\n     */\n  NgbCarousel.prototype.select =\n  /**\n  * Navigate to a slide with the specified identifier.\n  */\n  function (slideId) {\n    this.cycleToSelected(slideId, this.getSlideEventDirection(this.activeId, slideId));\n    this._restartTimer();\n  };\n  /**\n   * Navigate to the next slide.\n   */\n  /**\n     * Navigate to the next slide.\n     */\n  NgbCarousel.prototype.prev =\n  /**\n  * Navigate to the next slide.\n  */\n  function () {\n    this.cycleToPrev();\n    this._restartTimer();\n  };\n  /**\n   * Navigate to the next slide.\n   */\n  /**\n     * Navigate to the next slide.\n     */\n  NgbCarousel.prototype.next =\n  /**\n  * Navigate to the next slide.\n  */\n  function () {\n    this.cycleToNext();\n    this._restartTimer();\n  };\n  /**\n   * Stops the carousel from cycling through items.\n   */\n  /**\n     * Stops the carousel from cycling through items.\n     */\n  NgbCarousel.prototype.pause =\n  /**\n  * Stops the carousel from cycling through items.\n  */\n  function () {\n    this._stopTimer();\n  };\n  /**\n   * Restarts cycling through the carousel slides from left to right.\n   */\n  /**\n     * Restarts cycling through the carousel slides from left to right.\n     */\n  NgbCarousel.prototype.cycle =\n  /**\n  * Restarts cycling through the carousel slides from left to right.\n  */\n  function () {\n    this._startTimer();\n  };\n  NgbCarousel.prototype.cycleToNext = function () {\n    this.cycleToSelected(this._getNextSlide(this.activeId), NgbSlideEventDirection.LEFT);\n  };\n  NgbCarousel.prototype.cycleToPrev = function () {\n    this.cycleToSelected(this._getPrevSlide(this.activeId), NgbSlideEventDirection.RIGHT);\n  };\n  NgbCarousel.prototype.cycleToSelected = function (slideIdx, direction) {\n    var selectedSlide = this._getSlideById(slideIdx);\n    if (selectedSlide) {\n      if (selectedSlide.id !== this.activeId) {\n        this.slide.emit({\n          prev: this.activeId,\n          current: selectedSlide.id,\n          direction: direction\n        });\n      }\n      this.activeId = selectedSlide.id;\n    }\n  };\n  NgbCarousel.prototype.getSlideEventDirection = function (currentActiveSlideId, nextActiveSlideId) {\n    var currentActiveSlideIdx = this._getSlideIdxById(currentActiveSlideId);\n    var nextActiveSlideIdx = this._getSlideIdxById(nextActiveSlideId);\n    return currentActiveSlideIdx > nextActiveSlideIdx ? NgbSlideEventDirection.RIGHT : NgbSlideEventDirection.LEFT;\n  };\n  NgbCarousel.prototype.keyPrev = function () {\n    if (this.keyboard) {\n      this.prev();\n    }\n  };\n  NgbCarousel.prototype.keyNext = function () {\n    if (this.keyboard) {\n      this.next();\n    }\n  };\n  NgbCarousel.prototype._restartTimer = function () {\n    this._stopTimer();\n    this._startTimer();\n  };\n  NgbCarousel.prototype._startTimer = function () {\n    var _this = this;\n    if (this.interval > 0) {\n      this._slideChangeInterval = setInterval(function () {\n        _this.cycleToNext();\n      }, this.interval);\n    }\n  };\n  NgbCarousel.prototype._stopTimer = function () {\n    clearInterval(this._slideChangeInterval);\n  };\n  NgbCarousel.prototype._getSlideById = function (slideId) {\n    var slideWithId = this.slides.filter(function (slide) {\n      return slide.id === slideId;\n    });\n    return slideWithId.length ? slideWithId[0] : null;\n  };\n  NgbCarousel.prototype._getSlideIdxById = function (slideId) {\n    return this.slides.toArray().indexOf(this._getSlideById(slideId));\n  };\n  NgbCarousel.prototype._getNextSlide = function (currentSlideId) {\n    var slideArr = this.slides.toArray();\n    var currentSlideIdx = this._getSlideIdxById(currentSlideId);\n    var isLastSlide = currentSlideIdx === slideArr.length - 1;\n    return isLastSlide ? this.wrap ? slideArr[0].id : slideArr[slideArr.length - 1].id : slideArr[currentSlideIdx + 1].id;\n  };\n  NgbCarousel.prototype._getPrevSlide = function (currentSlideId) {\n    var slideArr = this.slides.toArray();\n    var currentSlideIdx = this._getSlideIdxById(currentSlideId);\n    var isFirstSlide = currentSlideIdx === 0;\n    return isFirstSlide ? this.wrap ? slideArr[slideArr.length - 1].id : slideArr[0].id : slideArr[currentSlideIdx - 1].id;\n  };\n  NgbCarousel.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'ngb-carousel',\n      exportAs: 'ngbCarousel',\n      host: {\n        'class': 'carousel slide',\n        '[style.display]': '\"block\"',\n        'tabIndex': '0',\n        '(mouseenter)': 'pause()',\n        '(mouseleave)': 'cycle()',\n        '(keydown.arrowLeft)': 'keyPrev()',\n        '(keydown.arrowRight)': 'keyNext()'\n      },\n      template: \"\\n    <ol class=\\\"carousel-indicators\\\">\\n      <li *ngFor=\\\"let slide of slides\\\" [id]=\\\"slide.id\\\" [class.active]=\\\"slide.id === activeId\\\"\\n          (click)=\\\"cycleToSelected(slide.id, getSlideEventDirection(activeId, slide.id))\\\"></li>\\n    </ol>\\n    <div class=\\\"carousel-inner\\\">\\n      <div *ngFor=\\\"let slide of slides\\\" class=\\\"carousel-item\\\" [class.active]=\\\"slide.id === activeId\\\">\\n        <ng-template [ngTemplateOutlet]=\\\"slide.tplRef\\\"></ng-template>\\n      </div>\\n    </div>\\n    <a class=\\\"carousel-control-prev\\\" role=\\\"button\\\" (click)=\\\"cycleToPrev()\\\">\\n      <span class=\\\"carousel-control-prev-icon\\\" aria-hidden=\\\"true\\\"></span>\\n      <span class=\\\"sr-only\\\">Previous</span>\\n    </a>\\n    <a class=\\\"carousel-control-next\\\" role=\\\"button\\\" (click)=\\\"cycleToNext()\\\">\\n      <span class=\\\"carousel-control-next-icon\\\" aria-hidden=\\\"true\\\"></span>\\n      <span class=\\\"sr-only\\\">Next</span>\\n    </a>\\n    \"\n    }]\n  }];\n  /** @nocollapse */\n  NgbCarousel.ctorParameters = function () {\n    return [{\n      type: NgbCarouselConfig\n    }];\n  };\n  NgbCarousel.propDecorators = {\n    \"slides\": [{\n      type: ContentChildren,\n      args: [NgbSlide]\n    }],\n    \"interval\": [{\n      type: Input\n    }],\n    \"wrap\": [{\n      type: Input\n    }],\n    \"keyboard\": [{\n      type: Input\n    }],\n    \"activeId\": [{\n      type: Input\n    }],\n    \"slide\": [{\n      type: Output\n    }]\n  };\n  return NgbCarousel;\n}();\nexport { NgbCarousel };\n/**\n * Enum to define the carousel slide event direction\n */\n/**\n * Enum to define the carousel slide event direction\n */\nexport var NgbSlideEventDirection = /*#__PURE__*/function (NgbSlideEventDirection) {\n  NgbSlideEventDirection[NgbSlideEventDirection[\"LEFT\"] = 'left'] = \"LEFT\";\n  NgbSlideEventDirection[NgbSlideEventDirection[\"RIGHT\"] = 'right'] = \"RIGHT\";\n  return NgbSlideEventDirection;\n}(NgbSlideEventDirection || {});\n/**\n * Enum to define the carousel slide event direction\n */\n\nexport var NGB_CAROUSEL_DIRECTIVES = [NgbCarousel, NgbSlide];\n//# sourceMappingURL=carousel.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}