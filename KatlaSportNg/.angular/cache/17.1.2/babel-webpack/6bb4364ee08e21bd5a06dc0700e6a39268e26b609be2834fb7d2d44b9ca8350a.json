{"ast":null,"code":"import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { getValueInRange } from '../util/util';\nimport { NgbProgressbarConfig } from './progressbar-config';\n/**\n * Directive that can be used to provide feedback on the progress of a workflow or an action.\n */\nvar NgbProgressbar = /** @class */function () {\n  function NgbProgressbar(config) {\n    /**\n       * Current value to be displayed in the progressbar. Should be smaller or equal to \"max\" value.\n       */\n    this.value = 0;\n    this.max = config.max;\n    this.animated = config.animated;\n    this.striped = config.striped;\n    this.type = config.type;\n    this.showValue = config.showValue;\n    this.height = config.height;\n  }\n  NgbProgressbar.prototype.getValue = function () {\n    return getValueInRange(this.value, this.max);\n  };\n  NgbProgressbar.prototype.getPercentValue = function () {\n    return 100 * this.getValue() / this.max;\n  };\n  NgbProgressbar.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'ngb-progressbar',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"\\n    <div class=\\\"progress\\\" [style.height]=\\\"height\\\">\\n      <div class=\\\"progress-bar{{type ? ' bg-' + type : ''}}{{animated ? ' progress-bar-animated' : ''}}{{striped ?\\n    ' progress-bar-striped' : ''}}\\\" role=\\\"progressbar\\\" [style.width.%]=\\\"getPercentValue()\\\"\\n    [attr.aria-valuenow]=\\\"getValue()\\\" aria-valuemin=\\\"0\\\" [attr.aria-valuemax]=\\\"max\\\">\\n        <span *ngIf=\\\"showValue\\\">{{getPercentValue()}}%</span><ng-content></ng-content>\\n      </div>\\n    </div>\\n  \"\n    }]\n  }];\n  /** @nocollapse */\n  NgbProgressbar.ctorParameters = function () {\n    return [{\n      type: NgbProgressbarConfig\n    }];\n  };\n  NgbProgressbar.propDecorators = {\n    \"max\": [{\n      type: Input\n    }],\n    \"animated\": [{\n      type: Input\n    }],\n    \"striped\": [{\n      type: Input\n    }],\n    \"showValue\": [{\n      type: Input\n    }],\n    \"type\": [{\n      type: Input\n    }],\n    \"value\": [{\n      type: Input\n    }],\n    \"height\": [{\n      type: Input\n    }]\n  };\n  return NgbProgressbar;\n}();\nexport { NgbProgressbar };\n//# sourceMappingURL=progressbar.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}