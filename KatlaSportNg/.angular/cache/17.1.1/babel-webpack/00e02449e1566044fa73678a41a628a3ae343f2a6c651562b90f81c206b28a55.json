{"ast":null,"code":"import { Component, Input, Output, EventEmitter, TemplateRef } from '@angular/core';\nimport { toString } from '../util/util';\nvar NgbTypeaheadWindow = /** @class */function () {\n  function NgbTypeaheadWindow() {\n    this.activeIdx = 0;\n    /**\n       * Flag indicating if the first row should be active initially\n       */\n    this.focusFirst = true;\n    /**\n       * A function used to format a given result before display. This function should return a formatted string without any\n       * HTML markup\n       */\n    this.formatter = toString;\n    /**\n       * Event raised when user selects a particular result row\n       */\n    this.selectEvent = new EventEmitter();\n    this.activeChangeEvent = new EventEmitter();\n  }\n  NgbTypeaheadWindow.prototype.hasActive = function () {\n    return this.activeIdx > -1 && this.activeIdx < this.results.length;\n  };\n  NgbTypeaheadWindow.prototype.getActive = function () {\n    return this.results[this.activeIdx];\n  };\n  NgbTypeaheadWindow.prototype.markActive = function (activeIdx) {\n    this.activeIdx = activeIdx;\n    this._activeChanged();\n  };\n  NgbTypeaheadWindow.prototype.next = function () {\n    if (this.activeIdx === this.results.length - 1) {\n      this.activeIdx = this.focusFirst ? (this.activeIdx + 1) % this.results.length : -1;\n    } else {\n      this.activeIdx++;\n    }\n    this._activeChanged();\n  };\n  NgbTypeaheadWindow.prototype.prev = function () {\n    if (this.activeIdx < 0) {\n      this.activeIdx = this.results.length - 1;\n    } else if (this.activeIdx === 0) {\n      this.activeIdx = this.focusFirst ? this.results.length - 1 : -1;\n    } else {\n      this.activeIdx--;\n    }\n    this._activeChanged();\n  };\n  NgbTypeaheadWindow.prototype.resetActive = function () {\n    this.activeIdx = this.focusFirst ? 0 : -1;\n    this._activeChanged();\n  };\n  NgbTypeaheadWindow.prototype.select = function (item) {\n    this.selectEvent.emit(item);\n  };\n  NgbTypeaheadWindow.prototype.ngOnInit = function () {\n    this.resetActive();\n  };\n  NgbTypeaheadWindow.prototype._activeChanged = function () {\n    this.activeChangeEvent.emit(this.activeIdx >= 0 ? this.id + '-' + this.activeIdx : undefined);\n  };\n  NgbTypeaheadWindow.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'ngb-typeahead-window',\n      exportAs: 'ngbTypeaheadWindow',\n      host: {\n        'class': 'dropdown-menu show',\n        'role': 'listbox',\n        '[id]': 'id'\n      },\n      template: \"\\n    <ng-template #rt let-result=\\\"result\\\" let-term=\\\"term\\\" let-formatter=\\\"formatter\\\">\\n      <ngb-highlight [result]=\\\"formatter(result)\\\" [term]=\\\"term\\\"></ngb-highlight>\\n    </ng-template>\\n    <ng-template ngFor [ngForOf]=\\\"results\\\" let-result let-idx=\\\"index\\\">\\n      <button type=\\\"button\\\" class=\\\"dropdown-item\\\" role=\\\"option\\\"\\n        [id]=\\\"id + '-' + idx\\\"\\n        [class.active]=\\\"idx === activeIdx\\\"\\n        (mouseenter)=\\\"markActive(idx)\\\"\\n        (click)=\\\"select(result)\\\">\\n          <ng-template [ngTemplateOutlet]=\\\"resultTemplate || rt\\\"\\n          [ngTemplateOutletContext]=\\\"{result: result, term: term, formatter: formatter}\\\"></ng-template>\\n      </button>\\n    </ng-template>\\n  \"\n    }]\n  }];\n  /** @nocollapse */\n  NgbTypeaheadWindow.propDecorators = {\n    \"id\": [{\n      type: Input\n    }],\n    \"focusFirst\": [{\n      type: Input\n    }],\n    \"results\": [{\n      type: Input\n    }],\n    \"term\": [{\n      type: Input\n    }],\n    \"formatter\": [{\n      type: Input\n    }],\n    \"resultTemplate\": [{\n      type: Input\n    }],\n    \"selectEvent\": [{\n      type: Output,\n      args: ['select']\n    }],\n    \"activeChangeEvent\": [{\n      type: Output,\n      args: ['activeChange']\n    }]\n  };\n  return NgbTypeaheadWindow;\n}();\nexport { NgbTypeaheadWindow };\n//# sourceMappingURL=typeahead-window.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}