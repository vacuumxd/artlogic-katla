{"ast":null,"code":"import { Directive, Input, ElementRef, ViewContainerRef, Renderer2, ComponentFactoryResolver, NgZone, TemplateRef, forwardRef, EventEmitter, Output } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { NgbDate } from './ngb-date';\nimport { NgbDatepicker } from './datepicker';\nimport { NgbDateParserFormatter } from './ngb-date-parser-formatter';\nimport { positionElements } from '../util/positioning';\nimport { NgbFocusTrapFactory } from '../util/focus-trap';\nimport { NgbDateAdapter } from './ngb-date-adapter';\nimport { NgbCalendar } from './ngb-calendar';\nimport { NgbDatepickerService } from './datepicker-service';\nvar NGB_DATEPICKER_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return NgbInputDatepicker;\n  }),\n  multi: true\n};\nvar NGB_DATEPICKER_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(function () {\n    return NgbInputDatepicker;\n  }),\n  multi: true\n};\n/**\n * A directive that makes it possible to have datepickers on input fields.\n * Manages integration with the input field itself (data entry) and ngModel (validation etc.).\n */\nvar NgbInputDatepicker = /** @class */function () {\n  function NgbInputDatepicker(_parserFormatter, _elRef, _vcRef, _renderer, _cfr, ngZone, _service, _calendar, _ngbDateAdapter, _focusTrapFactory) {\n    var _this = this;\n    this._parserFormatter = _parserFormatter;\n    this._elRef = _elRef;\n    this._vcRef = _vcRef;\n    this._renderer = _renderer;\n    this._cfr = _cfr;\n    this._service = _service;\n    this._calendar = _calendar;\n    this._ngbDateAdapter = _ngbDateAdapter;\n    this._focusTrapFactory = _focusTrapFactory;\n    this._cRef = null;\n    this._disabled = false;\n    this._focusTrap = null;\n    /**\n       * Indicates whether the datepicker popup should be closed automatically after date selection or not.\n       * If the value is 'false', the popup can be closed via 'close()' or 'toggle()' methods.\n       *\n       * @since 1.1.0\n       */\n    this.autoClose = true;\n    /**\n          * Placement of a datepicker popup accepts:\n          *    \"top\", \"top-left\", \"top-right\", \"bottom\", \"bottom-left\", \"bottom-right\",\n          *    \"left\", \"left-top\", \"left-bottom\", \"right\", \"right-top\", \"right-bottom\"\n          * and array of above values.\n          */\n    this.placement = 'bottom-left';\n    /**\n       * An event fired when user selects a date using keyboard or mouse.\n       * The payload of the event is currently selected NgbDateStruct.\n       *\n       * @since 1.1.1\n       */\n    this.dateSelect = new EventEmitter();\n    /**\n       * An event fired when navigation happens and currently displayed month changes.\n       * See NgbDatepickerNavigateEvent for the payload info.\n       */\n    this.navigate = new EventEmitter();\n    this._onChange = function (_) {};\n    this._onTouched = function () {};\n    this._validatorChange = function () {};\n    this._zoneSubscription = ngZone.onStable.subscribe(function () {\n      if (_this._cRef) {\n        positionElements(_this._elRef.nativeElement, _this._cRef.location.nativeElement, _this.placement, _this.container === 'body');\n      }\n    });\n  }\n  Object.defineProperty(NgbInputDatepicker.prototype, \"disabled\", {\n    get: function () {\n      return this._disabled;\n    },\n    set: function (value) {\n      this._disabled = value === '' || value && value !== 'false';\n      if (this.isOpen()) {\n        this._cRef.instance.setDisabledState(this._disabled);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  NgbInputDatepicker.prototype.registerOnChange = function (fn) {\n    this._onChange = fn;\n  };\n  NgbInputDatepicker.prototype.registerOnTouched = function (fn) {\n    this._onTouched = fn;\n  };\n  NgbInputDatepicker.prototype.registerOnValidatorChange = function (fn) {\n    this._validatorChange = fn;\n  };\n  ;\n  NgbInputDatepicker.prototype.setDisabledState = function (isDisabled) {\n    this.disabled = isDisabled;\n  };\n  NgbInputDatepicker.prototype.validate = function (c) {\n    var value = c.value;\n    if (value === null || value === undefined) {\n      return null;\n    }\n    var ngbDate = this._fromDateStruct(this._ngbDateAdapter.fromModel(value));\n    if (!this._calendar.isValid(ngbDate)) {\n      return {\n        'ngbDate': {\n          invalid: c.value\n        }\n      };\n    }\n    if (this.minDate && ngbDate.before(NgbDate.from(this.minDate))) {\n      return {\n        'ngbDate': {\n          requiredBefore: this.minDate\n        }\n      };\n    }\n    if (this.maxDate && ngbDate.after(NgbDate.from(this.maxDate))) {\n      return {\n        'ngbDate': {\n          requiredAfter: this.maxDate\n        }\n      };\n    }\n  };\n  NgbInputDatepicker.prototype.writeValue = function (value) {\n    this._model = this._fromDateStruct(this._ngbDateAdapter.fromModel(value));\n    this._writeModelValue(this._model);\n  };\n  NgbInputDatepicker.prototype.manualDateChange = function (value, updateView) {\n    if (updateView === void 0) {\n      updateView = false;\n    }\n    this._model = this._fromDateStruct(this._parserFormatter.parse(value));\n    this._onChange(this._model ? this._ngbDateAdapter.toModel(this._model) : value === '' ? null : value);\n    if (updateView && this._model) {\n      this._writeModelValue(this._model);\n    }\n  };\n  NgbInputDatepicker.prototype.isOpen = function () {\n    return !!this._cRef;\n  };\n  /**\n   * Opens the datepicker with the selected date indicated by the ngModel value.\n   */\n  /**\n     * Opens the datepicker with the selected date indicated by the ngModel value.\n     */\n  NgbInputDatepicker.prototype.open =\n  /**\n  * Opens the datepicker with the selected date indicated by the ngModel value.\n  */\n  function () {\n    var _this = this;\n    if (!this.isOpen()) {\n      var cf = this._cfr.resolveComponentFactory(NgbDatepicker);\n      this._cRef = this._vcRef.createComponent(cf);\n      this._applyPopupStyling(this._cRef.location.nativeElement);\n      this._applyDatepickerInputs(this._cRef.instance);\n      this._subscribeForDatepickerOutputs(this._cRef.instance);\n      this._cRef.instance.ngOnInit();\n      this._cRef.instance.writeValue(this._ngbDateAdapter.toModel(this._model));\n      // date selection event handling\n      this._cRef.instance.registerOnChange(function (selectedDate) {\n        _this.writeValue(selectedDate);\n        _this._onChange(selectedDate);\n      });\n      this._cRef.changeDetectorRef.detectChanges();\n      this._cRef.instance.setDisabledState(this.disabled);\n      if (this.container === 'body') {\n        window.document.querySelector(this.container).appendChild(this._cRef.location.nativeElement);\n      }\n      this._focusTrap = this._focusTrapFactory.create(this._cRef.location.nativeElement, true);\n      // focus handling\n      this._cRef.instance.focus();\n    }\n  };\n  /**\n   * Closes the datepicker popup.\n   */\n  /**\n     * Closes the datepicker popup.\n     */\n  NgbInputDatepicker.prototype.close =\n  /**\n  * Closes the datepicker popup.\n  */\n  function () {\n    if (this.isOpen()) {\n      this._vcRef.remove(this._vcRef.indexOf(this._cRef.hostView));\n      this._cRef = null;\n      this._focusTrap.destroy();\n      this._focusTrap = null;\n    }\n  };\n  /**\n   * Toggles the datepicker popup (opens when closed and closes when opened).\n   */\n  /**\n     * Toggles the datepicker popup (opens when closed and closes when opened).\n     */\n  NgbInputDatepicker.prototype.toggle =\n  /**\n  * Toggles the datepicker popup (opens when closed and closes when opened).\n  */\n  function () {\n    if (this.isOpen()) {\n      this.close();\n    } else {\n      this.open();\n    }\n  };\n  /**\n   * Navigates current view to provided date.\n   * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\n   * If nothing or invalid date provided calendar will open current month.\n   * Use 'startDate' input as an alternative\n   */\n  /**\n     * Navigates current view to provided date.\n     * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\n     * If nothing or invalid date provided calendar will open current month.\n     * Use 'startDate' input as an alternative\n     */\n  NgbInputDatepicker.prototype.navigateTo =\n  /**\n  * Navigates current view to provided date.\n  * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\n  * If nothing or invalid date provided calendar will open current month.\n  * Use 'startDate' input as an alternative\n  */\n  function (date) {\n    if (this.isOpen()) {\n      this._cRef.instance.navigateTo(date);\n    }\n  };\n  NgbInputDatepicker.prototype.onBlur = function () {\n    this._onTouched();\n  };\n  NgbInputDatepicker.prototype.ngOnChanges = function (changes) {\n    if (changes['minDate'] || changes['maxDate']) {\n      this._validatorChange();\n    }\n  };\n  NgbInputDatepicker.prototype.ngOnDestroy = function () {\n    this.close();\n    this._zoneSubscription.unsubscribe();\n  };\n  NgbInputDatepicker.prototype._applyDatepickerInputs = function (datepickerInstance) {\n    var _this = this;\n    ['dayTemplate', 'displayMonths', 'firstDayOfWeek', 'markDisabled', 'minDate', 'maxDate', 'navigation', 'outsideDays', 'showNavigation', 'showWeekdays', 'showWeekNumbers'].forEach(function (optionName) {\n      if (_this[optionName] !== undefined) {\n        datepickerInstance[optionName] = _this[optionName];\n      }\n    });\n    datepickerInstance.startDate = this.startDate || this._model;\n  };\n  NgbInputDatepicker.prototype._applyPopupStyling = function (nativeElement) {\n    this._renderer.addClass(nativeElement, 'dropdown-menu');\n    this._renderer.setStyle(nativeElement, 'padding', '0');\n    this._renderer.addClass(nativeElement, 'show');\n  };\n  NgbInputDatepicker.prototype._subscribeForDatepickerOutputs = function (datepickerInstance) {\n    var _this = this;\n    datepickerInstance.navigate.subscribe(function (date) {\n      return _this.navigate.emit(date);\n    });\n    datepickerInstance.select.subscribe(function (date) {\n      _this.dateSelect.emit(date);\n      if (_this.autoClose) {\n        _this.close();\n      }\n    });\n  };\n  NgbInputDatepicker.prototype._writeModelValue = function (model) {\n    this._renderer.setProperty(this._elRef.nativeElement, 'value', this._parserFormatter.format(model));\n    if (this.isOpen()) {\n      this._cRef.instance.writeValue(this._ngbDateAdapter.toModel(model));\n      this._onTouched();\n    }\n  };\n  NgbInputDatepicker.prototype._fromDateStruct = function (date) {\n    var ngbDate = date ? new NgbDate(date.year, date.month, date.day) : null;\n    return this._calendar.isValid(ngbDate) ? ngbDate : null;\n  };\n  NgbInputDatepicker.decorators = [{\n    type: Directive,\n    args: [{\n      selector: 'input[ngbDatepicker]',\n      exportAs: 'ngbDatepicker',\n      host: {\n        '(input)': 'manualDateChange($event.target.value)',\n        '(change)': 'manualDateChange($event.target.value, true)',\n        '(keyup.esc)': 'close()',\n        '(blur)': 'onBlur()',\n        '[disabled]': 'disabled'\n      },\n      providers: [NGB_DATEPICKER_VALUE_ACCESSOR, NGB_DATEPICKER_VALIDATOR, NgbDatepickerService]\n    }]\n  }];\n  /** @nocollapse */\n  NgbInputDatepicker.ctorParameters = function () {\n    return [{\n      type: NgbDateParserFormatter\n    }, {\n      type: ElementRef\n    }, {\n      type: ViewContainerRef\n    }, {\n      type: Renderer2\n    }, {\n      type: ComponentFactoryResolver\n    }, {\n      type: NgZone\n    }, {\n      type: NgbDatepickerService\n    }, {\n      type: NgbCalendar\n    }, {\n      type: NgbDateAdapter\n    }, {\n      type: NgbFocusTrapFactory\n    }];\n  };\n  NgbInputDatepicker.propDecorators = {\n    \"autoClose\": [{\n      type: Input\n    }],\n    \"dayTemplate\": [{\n      type: Input\n    }],\n    \"displayMonths\": [{\n      type: Input\n    }],\n    \"firstDayOfWeek\": [{\n      type: Input\n    }],\n    \"markDisabled\": [{\n      type: Input\n    }],\n    \"minDate\": [{\n      type: Input\n    }],\n    \"maxDate\": [{\n      type: Input\n    }],\n    \"navigation\": [{\n      type: Input\n    }],\n    \"outsideDays\": [{\n      type: Input\n    }],\n    \"placement\": [{\n      type: Input\n    }],\n    \"showWeekdays\": [{\n      type: Input\n    }],\n    \"showWeekNumbers\": [{\n      type: Input\n    }],\n    \"startDate\": [{\n      type: Input\n    }],\n    \"container\": [{\n      type: Input\n    }],\n    \"dateSelect\": [{\n      type: Output\n    }],\n    \"navigate\": [{\n      type: Output\n    }],\n    \"disabled\": [{\n      type: Input\n    }]\n  };\n  return NgbInputDatepicker;\n}();\nexport { NgbInputDatepicker };\n//# sourceMappingURL=datepicker-input.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}