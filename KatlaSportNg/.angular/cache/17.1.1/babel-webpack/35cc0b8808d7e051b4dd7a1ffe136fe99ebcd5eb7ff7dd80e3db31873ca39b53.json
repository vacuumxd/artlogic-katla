{"ast":null,"code":"import { Component, Input, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { isNumber, padNumber, toInteger } from '../util/util';\nimport { NgbTime } from './ngb-time';\nimport { NgbTimepickerConfig } from './timepicker-config';\nvar NGB_TIMEPICKER_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return NgbTimepicker;\n  }),\n  multi: true\n};\n/**\n * A lightweight & configurable timepicker directive.\n */\nvar NgbTimepicker = /** @class */function () {\n  function NgbTimepicker(config) {\n    this.onChange = function (_) {};\n    this.onTouched = function () {};\n    this.meridian = config.meridian;\n    this.spinners = config.spinners;\n    this.seconds = config.seconds;\n    this.hourStep = config.hourStep;\n    this.minuteStep = config.minuteStep;\n    this.secondStep = config.secondStep;\n    this.disabled = config.disabled;\n    this.readonlyInputs = config.readonlyInputs;\n    this.size = config.size;\n  }\n  NgbTimepicker.prototype.writeValue = function (value) {\n    this.model = value ? new NgbTime(value.hour, value.minute, value.second) : new NgbTime();\n    if (!this.seconds && (!value || !isNumber(value.second))) {\n      this.model.second = 0;\n    }\n  };\n  NgbTimepicker.prototype.registerOnChange = function (fn) {\n    this.onChange = fn;\n  };\n  NgbTimepicker.prototype.registerOnTouched = function (fn) {\n    this.onTouched = fn;\n  };\n  NgbTimepicker.prototype.setDisabledState = function (isDisabled) {\n    this.disabled = isDisabled;\n  };\n  NgbTimepicker.prototype.changeHour = function (step) {\n    this.model.changeHour(step);\n    this.propagateModelChange();\n  };\n  NgbTimepicker.prototype.changeMinute = function (step) {\n    this.model.changeMinute(step);\n    this.propagateModelChange();\n  };\n  NgbTimepicker.prototype.changeSecond = function (step) {\n    this.model.changeSecond(step);\n    this.propagateModelChange();\n  };\n  NgbTimepicker.prototype.updateHour = function (newVal) {\n    var isPM = this.model.hour >= 12;\n    var enteredHour = toInteger(newVal);\n    if (this.meridian && (isPM && enteredHour < 12 || !isPM && enteredHour === 12)) {\n      this.model.updateHour(enteredHour + 12);\n    } else {\n      this.model.updateHour(enteredHour);\n    }\n    this.propagateModelChange();\n  };\n  NgbTimepicker.prototype.updateMinute = function (newVal) {\n    this.model.updateMinute(toInteger(newVal));\n    this.propagateModelChange();\n  };\n  NgbTimepicker.prototype.updateSecond = function (newVal) {\n    this.model.updateSecond(toInteger(newVal));\n    this.propagateModelChange();\n  };\n  NgbTimepicker.prototype.toggleMeridian = function () {\n    if (this.meridian) {\n      this.changeHour(12);\n    }\n  };\n  NgbTimepicker.prototype.formatHour = function (value) {\n    if (isNumber(value)) {\n      if (this.meridian) {\n        return padNumber(value % 12 === 0 ? 12 : value % 12);\n      } else {\n        return padNumber(value % 24);\n      }\n    } else {\n      return padNumber(NaN);\n    }\n  };\n  NgbTimepicker.prototype.formatMinSec = function (value) {\n    return padNumber(value);\n  };\n  NgbTimepicker.prototype.setFormControlSize = function () {\n    return {\n      'form-control-sm': this.size === 'small',\n      'form-control-lg': this.size === 'large'\n    };\n  };\n  NgbTimepicker.prototype.setButtonSize = function () {\n    return {\n      'btn-sm': this.size === 'small',\n      'btn-lg': this.size === 'large'\n    };\n  };\n  NgbTimepicker.prototype.ngOnChanges = function (changes) {\n    if (changes['seconds'] && !this.seconds && this.model && !isNumber(this.model.second)) {\n      this.model.second = 0;\n      this.propagateModelChange(false);\n    }\n  };\n  NgbTimepicker.prototype.propagateModelChange = function (touched) {\n    if (touched === void 0) {\n      touched = true;\n    }\n    if (touched) {\n      this.onTouched();\n    }\n    if (this.model.isValid(this.seconds)) {\n      this.onChange({\n        hour: this.model.hour,\n        minute: this.model.minute,\n        second: this.model.second\n      });\n    } else {\n      this.onChange(null);\n    }\n  };\n  NgbTimepicker.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'ngb-timepicker',\n      styles: [\"\\n    .ngb-tp {\\n      display: -ms-flexbox;\\n      display: flex;\\n      -ms-flex-align: center;\\n      align-items: center;\\n    }\\n\\n    .ngb-tp-hour, .ngb-tp-minute, .ngb-tp-second, .ngb-tp-meridian {\\n      display: -ms-flexbox;\\n      display: flex;\\n      -ms-flex-direction: column;\\n      flex-direction: column;\\n      -ms-flex-align: center;\\n      align-items: center;\\n      -ms-flex-pack: distribute;\\n      justify-content: space-around;\\n    }\\n\\n    .ngb-tp-spacer {\\n      width: 1em;\\n      text-align: center;\\n    }\\n\\n    .chevron::before {\\n      border-style: solid;\\n      border-width: 0.29em 0.29em 0 0;\\n      content: '';\\n      display: inline-block;\\n      height: 0.69em;\\n      left: 0.05em;\\n      position: relative;\\n      top: 0.15em;\\n      transform: rotate(-45deg);\\n      -webkit-transform: rotate(-45deg);\\n      -ms-transform: rotate(-45deg);\\n      vertical-align: middle;\\n      width: 0.71em;\\n    }\\n\\n    .chevron.bottom:before {\\n      top: -.3em;\\n      -webkit-transform: rotate(135deg);\\n      -ms-transform: rotate(135deg);\\n      transform: rotate(135deg);\\n    }\\n\\n    input {\\n      text-align: center;\\n      display: inline-block;\\n      width: auto;\\n    }\\n  \"],\n      template: \"\\n    <fieldset [disabled]=\\\"disabled\\\" [class.disabled]=\\\"disabled\\\">\\n      <div class=\\\"ngb-tp\\\">\\n        <div class=\\\"ngb-tp-hour\\\">\\n          <button *ngIf=\\\"spinners\\\" type=\\\"button\\\" class=\\\"btn btn-link\\\" [ngClass]=\\\"setButtonSize()\\\" (click)=\\\"changeHour(hourStep)\\\"\\n            [disabled]=\\\"disabled\\\" [class.disabled]=\\\"disabled\\\">\\n            <span class=\\\"chevron\\\"></span>\\n            <span class=\\\"sr-only\\\">Increment hours</span>\\n          </button>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" [ngClass]=\\\"setFormControlSize()\\\" maxlength=\\\"2\\\" size=\\\"2\\\" placeholder=\\\"HH\\\"\\n            [value]=\\\"formatHour(model?.hour)\\\" (change)=\\\"updateHour($event.target.value)\\\"\\n            [readonly]=\\\"readonlyInputs\\\" [disabled]=\\\"disabled\\\" aria-label=\\\"Hours\\\">\\n          <button *ngIf=\\\"spinners\\\" type=\\\"button\\\" class=\\\"btn btn-link\\\" [ngClass]=\\\"setButtonSize()\\\" (click)=\\\"changeHour(-hourStep)\\\"\\n            [disabled]=\\\"disabled\\\" [class.disabled]=\\\"disabled\\\">\\n            <span class=\\\"chevron bottom\\\"></span>\\n            <span class=\\\"sr-only\\\">Decrement hours</span>\\n          </button>\\n        </div>\\n        <div class=\\\"ngb-tp-spacer\\\">:</div>\\n        <div class=\\\"ngb-tp-minute\\\">\\n          <button *ngIf=\\\"spinners\\\" type=\\\"button\\\" class=\\\"btn btn-link\\\" [ngClass]=\\\"setButtonSize()\\\" (click)=\\\"changeMinute(minuteStep)\\\"\\n            [disabled]=\\\"disabled\\\" [class.disabled]=\\\"disabled\\\">\\n            <span class=\\\"chevron\\\"></span>\\n            <span class=\\\"sr-only\\\">Increment minutes</span>\\n          </button>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" [ngClass]=\\\"setFormControlSize()\\\" maxlength=\\\"2\\\" size=\\\"2\\\" placeholder=\\\"MM\\\"\\n            [value]=\\\"formatMinSec(model?.minute)\\\" (change)=\\\"updateMinute($event.target.value)\\\"\\n            [readonly]=\\\"readonlyInputs\\\" [disabled]=\\\"disabled\\\" aria-label=\\\"Minutes\\\">\\n          <button *ngIf=\\\"spinners\\\" type=\\\"button\\\" class=\\\"btn btn-link\\\" [ngClass]=\\\"setButtonSize()\\\" (click)=\\\"changeMinute(-minuteStep)\\\"\\n            [disabled]=\\\"disabled\\\" [class.disabled]=\\\"disabled\\\">\\n            <span class=\\\"chevron bottom\\\"></span>\\n            <span class=\\\"sr-only\\\">Decrement minutes</span>\\n          </button>\\n        </div>\\n        <div *ngIf=\\\"seconds\\\" class=\\\"ngb-tp-spacer\\\">:</div>\\n        <div *ngIf=\\\"seconds\\\" class=\\\"ngb-tp-second\\\">\\n          <button *ngIf=\\\"spinners\\\" type=\\\"button\\\" class=\\\"btn btn-link\\\" [ngClass]=\\\"setButtonSize()\\\" (click)=\\\"changeSecond(secondStep)\\\"\\n            [disabled]=\\\"disabled\\\" [class.disabled]=\\\"disabled\\\">\\n            <span class=\\\"chevron\\\"></span>\\n            <span class=\\\"sr-only\\\">Increment seconds</span>\\n          </button>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" [ngClass]=\\\"setFormControlSize()\\\" maxlength=\\\"2\\\" size=\\\"2\\\" placeholder=\\\"SS\\\"\\n            [value]=\\\"formatMinSec(model?.second)\\\" (change)=\\\"updateSecond($event.target.value)\\\"\\n            [readonly]=\\\"readonlyInputs\\\" [disabled]=\\\"disabled\\\" aria-label=\\\"Seconds\\\">\\n          <button *ngIf=\\\"spinners\\\" type=\\\"button\\\" class=\\\"btn btn-link\\\" [ngClass]=\\\"setButtonSize()\\\" (click)=\\\"changeSecond(-secondStep)\\\"\\n            [disabled]=\\\"disabled\\\" [class.disabled]=\\\"disabled\\\">\\n            <span class=\\\"chevron bottom\\\"></span>\\n            <span class=\\\"sr-only\\\">Decrement seconds</span>\\n          </button>\\n        </div>\\n        <div *ngIf=\\\"meridian\\\" class=\\\"ngb-tp-spacer\\\"></div>\\n        <div *ngIf=\\\"meridian\\\" class=\\\"ngb-tp-meridian\\\">\\n          <button type=\\\"button\\\" class=\\\"btn btn-outline-primary\\\" [ngClass]=\\\"setButtonSize()\\\"\\n            [disabled]=\\\"disabled\\\" [class.disabled]=\\\"disabled\\\"\\n            (click)=\\\"toggleMeridian()\\\">{{model?.hour >= 12 ? 'PM' : 'AM'}}</button>\\n        </div>\\n      </div>\\n    </fieldset>\\n  \",\n      providers: [NGB_TIMEPICKER_VALUE_ACCESSOR]\n    }]\n  }];\n  /** @nocollapse */\n  NgbTimepicker.ctorParameters = function () {\n    return [{\n      type: NgbTimepickerConfig\n    }];\n  };\n  NgbTimepicker.propDecorators = {\n    \"meridian\": [{\n      type: Input\n    }],\n    \"spinners\": [{\n      type: Input\n    }],\n    \"seconds\": [{\n      type: Input\n    }],\n    \"hourStep\": [{\n      type: Input\n    }],\n    \"minuteStep\": [{\n      type: Input\n    }],\n    \"secondStep\": [{\n      type: Input\n    }],\n    \"readonlyInputs\": [{\n      type: Input\n    }],\n    \"size\": [{\n      type: Input\n    }]\n  };\n  return NgbTimepicker;\n}();\nexport { NgbTimepicker };\n//# sourceMappingURL=timepicker.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}