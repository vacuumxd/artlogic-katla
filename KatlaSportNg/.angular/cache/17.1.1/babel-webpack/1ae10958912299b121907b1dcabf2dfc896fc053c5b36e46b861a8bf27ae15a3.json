{"ast":null,"code":"import { Component, ChangeDetectionStrategy, Input, Output, EventEmitter, TemplateRef, ContentChild, forwardRef, ChangeDetectorRef } from '@angular/core';\nimport { NgbRatingConfig } from './rating-config';\nimport { toString, getValueInRange } from '../util/util';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nvar Key = /*#__PURE__*/function (Key) {\n  Key[Key[\"End\"] = 35] = \"End\";\n  Key[Key[\"Home\"] = 36] = \"Home\";\n  Key[Key[\"ArrowLeft\"] = 37] = \"ArrowLeft\";\n  Key[Key[\"ArrowUp\"] = 38] = \"ArrowUp\";\n  Key[Key[\"ArrowRight\"] = 39] = \"ArrowRight\";\n  Key[Key[\"ArrowDown\"] = 40] = \"ArrowDown\";\n  return Key;\n}(Key || {});\nvar NGB_RATING_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return NgbRating;\n  }),\n  multi: true\n};\n/**\n * Rating directive that will take care of visualising a star rating bar.\n */\nvar NgbRating = /** @class */function () {\n  function NgbRating(config, _changeDetectorRef) {\n    this._changeDetectorRef = _changeDetectorRef;\n    this.contexts = [];\n    this.disabled = false;\n    /**\n       * An event fired when a user is hovering over a given rating.\n       * Event's payload equals to the rating being hovered over.\n       */\n    this.hover = new EventEmitter();\n    /**\n       * An event fired when a user stops hovering over a given rating.\n       * Event's payload equals to the rating of the last item being hovered over.\n       */\n    this.leave = new EventEmitter();\n    /**\n       * An event fired when a user selects a new rating.\n       * Event's payload equals to the newly selected rating.\n       */\n    this.rateChange = new EventEmitter(true);\n    this.onChange = function (_) {};\n    this.onTouched = function () {};\n    this.max = config.max;\n    this.readonly = config.readonly;\n  }\n  NgbRating.prototype.ariaValueText = function () {\n    return this.nextRate + \" out of \" + this.max;\n  };\n  NgbRating.prototype.enter = function (value) {\n    if (!this.readonly && !this.disabled) {\n      this._updateState(value);\n    }\n    this.hover.emit(value);\n  };\n  NgbRating.prototype.handleBlur = function () {\n    this.onTouched();\n  };\n  NgbRating.prototype.handleClick = function (value) {\n    this.update(this.resettable && this.rate === value ? 0 : value);\n  };\n  NgbRating.prototype.handleKeyDown = function (event) {\n    if (Key[toString(event.which)]) {\n      event.preventDefault();\n      switch (event.which) {\n        case Key.ArrowDown:\n        case Key.ArrowLeft:\n          this.update(this.rate - 1);\n          break;\n        case Key.ArrowUp:\n        case Key.ArrowRight:\n          this.update(this.rate + 1);\n          break;\n        case Key.Home:\n          this.update(0);\n          break;\n        case Key.End:\n          this.update(this.max);\n          break;\n      }\n    }\n  };\n  NgbRating.prototype.ngOnChanges = function (changes) {\n    if (changes['rate']) {\n      this.update(this.rate);\n    }\n  };\n  NgbRating.prototype.ngOnInit = function () {\n    this.contexts = Array.from({\n      length: this.max\n    }, function (v, k) {\n      return {\n        fill: 0,\n        index: k\n      };\n    });\n    this._updateState(this.rate);\n  };\n  NgbRating.prototype.registerOnChange = function (fn) {\n    this.onChange = fn;\n  };\n  NgbRating.prototype.registerOnTouched = function (fn) {\n    this.onTouched = fn;\n  };\n  NgbRating.prototype.reset = function () {\n    this.leave.emit(this.nextRate);\n    this._updateState(this.rate);\n  };\n  NgbRating.prototype.setDisabledState = function (isDisabled) {\n    this.disabled = isDisabled;\n  };\n  NgbRating.prototype.update = function (value, internalChange) {\n    if (internalChange === void 0) {\n      internalChange = true;\n    }\n    var newRate = getValueInRange(value, this.max, 0);\n    if (!this.readonly && !this.disabled && this.rate !== newRate) {\n      this.rate = newRate;\n      this.rateChange.emit(this.rate);\n    }\n    if (internalChange) {\n      this.onChange(this.rate);\n      this.onTouched();\n    }\n    this._updateState(this.rate);\n  };\n  NgbRating.prototype.writeValue = function (value) {\n    this.update(value, false);\n    this._changeDetectorRef.markForCheck();\n  };\n  NgbRating.prototype._getFillValue = function (index) {\n    var diff = this.nextRate - index;\n    if (diff >= 1) {\n      return 100;\n    }\n    if (diff < 1 && diff > 0) {\n      return Number.parseInt((diff * 100).toFixed(2));\n    }\n    return 0;\n  };\n  NgbRating.prototype._updateState = function (nextValue) {\n    var _this = this;\n    this.nextRate = nextValue;\n    this.contexts.forEach(function (context, index) {\n      return context.fill = _this._getFillValue(index);\n    });\n  };\n  NgbRating.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'ngb-rating',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        'class': 'd-inline-flex',\n        'tabindex': '0',\n        'role': 'slider',\n        'aria-valuemin': '0',\n        '[attr.aria-valuemax]': 'max',\n        '[attr.aria-valuenow]': 'nextRate',\n        '[attr.aria-valuetext]': 'ariaValueText()',\n        '[attr.aria-disabled]': 'readonly ? true : null',\n        '(blur)': 'handleBlur()',\n        '(keydown)': 'handleKeyDown($event)',\n        '(mouseleave)': 'reset()'\n      },\n      template: \"\\n    <ng-template #t let-fill=\\\"fill\\\">{{ fill === 100 ? '&#9733;' : '&#9734;' }}</ng-template>\\n    <ng-template ngFor [ngForOf]=\\\"contexts\\\" let-index=\\\"index\\\">\\n      <span class=\\\"sr-only\\\">({{ index < nextRate ? '*' : ' ' }})</span>\\n      <span (mouseenter)=\\\"enter(index + 1)\\\" (click)=\\\"handleClick(index + 1)\\\" [style.cursor]=\\\"readonly || disabled ? 'default' : 'pointer'\\\">\\n        <ng-template [ngTemplateOutlet]=\\\"starTemplate || t\\\" [ngTemplateOutletContext]=\\\"contexts[index]\\\"></ng-template>\\n      </span>\\n    </ng-template>\\n  \",\n      providers: [NGB_RATING_VALUE_ACCESSOR]\n    }]\n  }];\n  /** @nocollapse */\n  NgbRating.ctorParameters = function () {\n    return [{\n      type: NgbRatingConfig\n    }, {\n      type: ChangeDetectorRef\n    }];\n  };\n  NgbRating.propDecorators = {\n    \"max\": [{\n      type: Input\n    }],\n    \"rate\": [{\n      type: Input\n    }],\n    \"readonly\": [{\n      type: Input\n    }],\n    \"resettable\": [{\n      type: Input\n    }],\n    \"starTemplate\": [{\n      type: Input\n    }, {\n      type: ContentChild,\n      args: [TemplateRef]\n    }],\n    \"hover\": [{\n      type: Output\n    }],\n    \"leave\": [{\n      type: Output\n    }],\n    \"rateChange\": [{\n      type: Output\n    }]\n  };\n  return NgbRating;\n}();\nexport { NgbRating };\n//# sourceMappingURL=rating.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}