{"ast":null,"code":"import { isNumber, toInteger } from '../util/util';\nvar NgbTime = /** @class */function () {\n  function NgbTime(hour, minute, second) {\n    this.hour = toInteger(hour);\n    this.minute = toInteger(minute);\n    this.second = toInteger(second);\n  }\n  NgbTime.prototype.changeHour = function (step) {\n    if (step === void 0) {\n      step = 1;\n    }\n    this.updateHour((isNaN(this.hour) ? 0 : this.hour) + step);\n  };\n  NgbTime.prototype.updateHour = function (hour) {\n    if (isNumber(hour)) {\n      this.hour = (hour < 0 ? 24 + hour : hour) % 24;\n    } else {\n      this.hour = NaN;\n    }\n  };\n  NgbTime.prototype.changeMinute = function (step) {\n    if (step === void 0) {\n      step = 1;\n    }\n    this.updateMinute((isNaN(this.minute) ? 0 : this.minute) + step);\n  };\n  NgbTime.prototype.updateMinute = function (minute) {\n    if (isNumber(minute)) {\n      this.minute = minute % 60 < 0 ? 60 + minute % 60 : minute % 60;\n      this.changeHour(Math.floor(minute / 60));\n    } else {\n      this.minute = NaN;\n    }\n  };\n  NgbTime.prototype.changeSecond = function (step) {\n    if (step === void 0) {\n      step = 1;\n    }\n    this.updateSecond((isNaN(this.second) ? 0 : this.second) + step);\n  };\n  NgbTime.prototype.updateSecond = function (second) {\n    if (isNumber(second)) {\n      this.second = second < 0 ? 60 + second % 60 : second % 60;\n      this.changeMinute(Math.floor(second / 60));\n    } else {\n      this.second = NaN;\n    }\n  };\n  NgbTime.prototype.isValid = function (checkSecs) {\n    if (checkSecs === void 0) {\n      checkSecs = true;\n    }\n    return isNumber(this.hour) && isNumber(this.minute) && (checkSecs ? isNumber(this.second) : true);\n  };\n  NgbTime.prototype.toString = function () {\n    return (this.hour || 0) + \":\" + (this.minute || 0) + \":\" + (this.second || 0);\n  };\n  return NgbTime;\n}();\nexport { NgbTime };\n//# sourceMappingURL=ngb-time.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}