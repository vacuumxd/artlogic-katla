{"ast":null,"code":"/**\n * A reference to an active (currently opened) modal. Instances of this class\n * can be injected into components passed as modal content.\n */\nvar\n/**\n* A reference to an active (currently opened) modal. Instances of this class\n* can be injected into components passed as modal content.\n*/\nNgbActiveModal = /** @class */function () {\n  function NgbActiveModal() {}\n  /**\n   * Can be used to close a modal, passing an optional result.\n   */\n  /**\n     * Can be used to close a modal, passing an optional result.\n     */\n  NgbActiveModal.prototype.close =\n  /**\n  * Can be used to close a modal, passing an optional result.\n  */\n  function (result) {};\n  /**\n   * Can be used to dismiss a modal, passing an optional reason.\n   */\n  /**\n     * Can be used to dismiss a modal, passing an optional reason.\n     */\n  NgbActiveModal.prototype.dismiss =\n  /**\n  * Can be used to dismiss a modal, passing an optional reason.\n  */\n  function (reason) {};\n  return NgbActiveModal;\n}();\n/**\n * A reference to an active (currently opened) modal. Instances of this class\n * can be injected into components passed as modal content.\n */\nexport { NgbActiveModal };\n/**\n * A reference to a newly opened modal.\n */\nvar\n/**\n* A reference to a newly opened modal.\n*/\nNgbModalRef = /** @class */function () {\n  function NgbModalRef(_windowCmptRef, _contentRef, _backdropCmptRef, _beforeDismiss) {\n    var _this = this;\n    this._windowCmptRef = _windowCmptRef;\n    this._contentRef = _contentRef;\n    this._backdropCmptRef = _backdropCmptRef;\n    this._beforeDismiss = _beforeDismiss;\n    _windowCmptRef.instance.dismissEvent.subscribe(function (reason) {\n      _this.dismiss(reason);\n    });\n    this.result = new Promise(function (resolve, reject) {\n      _this._resolve = resolve;\n      _this._reject = reject;\n    });\n    this.result.then(null, function () {});\n  }\n  Object.defineProperty(NgbModalRef.prototype, \"componentInstance\", {\n    /**\n     * The instance of component used as modal's content.\n     * Undefined when a TemplateRef is used as modal's content.\n     */\n    get:\n    /**\n    * The instance of component used as modal's content.\n    * Undefined when a TemplateRef is used as modal's content.\n    */\n    function () {\n      if (this._contentRef.componentRef) {\n        return this._contentRef.componentRef.instance;\n      }\n    },\n    // only needed to keep TS1.8 compatibility\n    set:\n    // only needed to keep TS1.8 compatibility\n    function (instance) {},\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Can be used to close a modal, passing an optional result.\n   */\n  /**\n     * Can be used to close a modal, passing an optional result.\n     */\n  NgbModalRef.prototype.close =\n  /**\n  * Can be used to close a modal, passing an optional result.\n  */\n  function (result) {\n    if (this._windowCmptRef) {\n      this._resolve(result);\n      this._removeModalElements();\n    }\n  };\n  /**\n   * Can be used to dismiss a modal, passing an optional reason.\n   */\n  /**\n     * Can be used to dismiss a modal, passing an optional reason.\n     */\n  NgbModalRef.prototype.dismiss =\n  /**\n  * Can be used to dismiss a modal, passing an optional reason.\n  */\n  function (reason) {\n    if (this._windowCmptRef) {\n      if (!this._beforeDismiss || this._beforeDismiss() !== false) {\n        this._reject(reason);\n        this._removeModalElements();\n      }\n    }\n  };\n  NgbModalRef.prototype._removeModalElements = function () {\n    var windowNativeEl = this._windowCmptRef.location.nativeElement;\n    windowNativeEl.parentNode.removeChild(windowNativeEl);\n    this._windowCmptRef.destroy();\n    if (this._backdropCmptRef) {\n      var backdropNativeEl = this._backdropCmptRef.location.nativeElement;\n      backdropNativeEl.parentNode.removeChild(backdropNativeEl);\n      this._backdropCmptRef.destroy();\n    }\n    if (this._contentRef && this._contentRef.viewRef) {\n      this._contentRef.viewRef.destroy();\n    }\n    this._windowCmptRef = null;\n    this._backdropCmptRef = null;\n    this._contentRef = null;\n  };\n  return NgbModalRef;\n}();\n/**\n * A reference to a newly opened modal.\n */\nexport { NgbModalRef };\n//# sourceMappingURL=modal-ref.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}