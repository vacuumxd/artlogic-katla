{"ast":null,"code":"import { Component, EventEmitter, Input, Output, ChangeDetectionStrategy } from '@angular/core';\nimport { getValueInRange, isNumber } from '../util/util';\nimport { NgbPaginationConfig } from './pagination-config';\n/**\n * A directive that will take care of visualising a pagination bar and enable / disable buttons correctly!\n */\nvar NgbPagination = /** @class */function () {\n  function NgbPagination(config) {\n    this.pageCount = 0;\n    this.pages = [];\n    /**\n       *  Current page. Page numbers start with 1\n       */\n    this.page = 1;\n    /**\n       *  An event fired when the page is changed.\n       *  Event's payload equals to the newly selected page.\n       *  Will fire only if collection size is set and all values are valid.\n       *  Page numbers start with 1\n       */\n    this.pageChange = new EventEmitter(true);\n    this.disabled = config.disabled;\n    this.boundaryLinks = config.boundaryLinks;\n    this.directionLinks = config.directionLinks;\n    this.ellipses = config.ellipses;\n    this.maxSize = config.maxSize;\n    this.pageSize = config.pageSize;\n    this.rotate = config.rotate;\n    this.size = config.size;\n  }\n  NgbPagination.prototype.hasPrevious = function () {\n    return this.page > 1;\n  };\n  NgbPagination.prototype.hasNext = function () {\n    return this.page < this.pageCount;\n  };\n  NgbPagination.prototype.selectPage = function (pageNumber) {\n    this._updatePages(pageNumber);\n  };\n  NgbPagination.prototype.ngOnChanges = function (changes) {\n    this._updatePages(this.page);\n  };\n  NgbPagination.prototype.isEllipsis = function (pageNumber) {\n    return pageNumber === -1;\n  };\n  /**\n   * Appends ellipses and first/last page number to the displayed pages\n   */\n  /**\n     * Appends ellipses and first/last page number to the displayed pages\n     */\n  NgbPagination.prototype._applyEllipses =\n  /**\n  * Appends ellipses and first/last page number to the displayed pages\n  */\n  function (start, end) {\n    if (this.ellipses) {\n      if (start > 0) {\n        if (start > 1) {\n          this.pages.unshift(-1);\n        }\n        this.pages.unshift(1);\n      }\n      if (end < this.pageCount) {\n        if (end < this.pageCount - 1) {\n          this.pages.push(-1);\n        }\n        this.pages.push(this.pageCount);\n      }\n    }\n  };\n  /**\n   * Rotates page numbers based on maxSize items visible.\n   * Currently selected page stays in the middle:\n   *\n   * Ex. for selected page = 6:\n   * [5,*6*,7] for maxSize = 3\n   * [4,5,*6*,7] for maxSize = 4\n   */\n  /**\n     * Rotates page numbers based on maxSize items visible.\n     * Currently selected page stays in the middle:\n     *\n     * Ex. for selected page = 6:\n     * [5,*6*,7] for maxSize = 3\n     * [4,5,*6*,7] for maxSize = 4\n     */\n  NgbPagination.prototype._applyRotation =\n  /**\n  * Rotates page numbers based on maxSize items visible.\n  * Currently selected page stays in the middle:\n  *\n  * Ex. for selected page = 6:\n  * [5,*6*,7] for maxSize = 3\n  * [4,5,*6*,7] for maxSize = 4\n  */\n  function () {\n    var start = 0;\n    var end = this.pageCount;\n    var leftOffset = Math.floor(this.maxSize / 2);\n    var rightOffset = this.maxSize % 2 === 0 ? leftOffset - 1 : leftOffset;\n    if (this.page <= leftOffset) {\n      // very beginning, no rotation -> [0..maxSize]\n      end = this.maxSize;\n    } else if (this.pageCount - this.page < leftOffset) {\n      // very end, no rotation -> [len-maxSize..len]\n      start = this.pageCount - this.maxSize;\n    } else {\n      // rotate\n      start = this.page - leftOffset - 1;\n      end = this.page + rightOffset;\n    }\n    return [start, end];\n  };\n  /**\n   * Paginates page numbers based on maxSize items per page\n   */\n  /**\n     * Paginates page numbers based on maxSize items per page\n     */\n  NgbPagination.prototype._applyPagination =\n  /**\n  * Paginates page numbers based on maxSize items per page\n  */\n  function () {\n    var page = Math.ceil(this.page / this.maxSize) - 1;\n    var start = page * this.maxSize;\n    var end = start + this.maxSize;\n    return [start, end];\n  };\n  NgbPagination.prototype._setPageInRange = function (newPageNo) {\n    var prevPageNo = this.page;\n    this.page = getValueInRange(newPageNo, this.pageCount, 1);\n    if (this.page !== prevPageNo && isNumber(this.collectionSize)) {\n      this.pageChange.emit(this.page);\n    }\n  };\n  NgbPagination.prototype._updatePages = function (newPage) {\n    this.pageCount = Math.ceil(this.collectionSize / this.pageSize);\n    if (!isNumber(this.pageCount)) {\n      this.pageCount = 0;\n    }\n    // fill-in model needed to render pages\n    this.pages.length = 0;\n    for (var i = 1; i <= this.pageCount; i++) {\n      this.pages.push(i);\n    }\n    // set page within 1..max range\n    this._setPageInRange(newPage);\n    // apply maxSize if necessary\n    if (this.maxSize > 0 && this.pageCount > this.maxSize) {\n      var start = 0;\n      var end = this.pageCount;\n      // either paginating or rotating page numbers\n      if (this.rotate) {\n        _a = this._applyRotation(), start = _a[0], end = _a[1];\n      } else {\n        _b = this._applyPagination(), start = _b[0], end = _b[1];\n      }\n      this.pages = this.pages.slice(start, end);\n      // adding ellipses\n      this._applyEllipses(start, end);\n    }\n    var _a, _b;\n  };\n  NgbPagination.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'ngb-pagination',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        'role': 'navigation'\n      },\n      template: \"\\n    <ul [class]=\\\"'pagination' + (size ? ' pagination-' + size : '')\\\">\\n      <li *ngIf=\\\"boundaryLinks\\\" class=\\\"page-item\\\"\\n        [class.disabled]=\\\"!hasPrevious() || disabled\\\">\\n        <a aria-label=\\\"First\\\" class=\\\"page-link\\\" href (click)=\\\"!!selectPage(1)\\\" [attr.tabindex]=\\\"(hasPrevious() ? null : '-1')\\\">\\n          <span aria-hidden=\\\"true\\\">&laquo;&laquo;</span>\\n        </a>\\n      </li>\\n\\n      <li *ngIf=\\\"directionLinks\\\" class=\\\"page-item\\\"\\n        [class.disabled]=\\\"!hasPrevious() || disabled\\\">\\n        <a aria-label=\\\"Previous\\\" class=\\\"page-link\\\" href (click)=\\\"!!selectPage(page-1)\\\" [attr.tabindex]=\\\"(hasPrevious() ? null : '-1')\\\">\\n          <span aria-hidden=\\\"true\\\">&laquo;</span>\\n        </a>\\n      </li>\\n      <li *ngFor=\\\"let pageNumber of pages\\\" class=\\\"page-item\\\" [class.active]=\\\"pageNumber === page\\\"\\n        [class.disabled]=\\\"isEllipsis(pageNumber) || disabled\\\">\\n        <a *ngIf=\\\"isEllipsis(pageNumber)\\\" class=\\\"page-link\\\">...</a>\\n        <a *ngIf=\\\"!isEllipsis(pageNumber)\\\" class=\\\"page-link\\\" href (click)=\\\"!!selectPage(pageNumber)\\\">\\n          {{pageNumber}}\\n          <span *ngIf=\\\"pageNumber === page\\\" class=\\\"sr-only\\\">(current)</span>\\n        </a>\\n      </li>\\n      <li *ngIf=\\\"directionLinks\\\" class=\\\"page-item\\\" [class.disabled]=\\\"!hasNext() || disabled\\\">\\n        <a aria-label=\\\"Next\\\" class=\\\"page-link\\\" href (click)=\\\"!!selectPage(page+1)\\\" [attr.tabindex]=\\\"(hasNext() ? null : '-1')\\\">\\n          <span aria-hidden=\\\"true\\\">&raquo;</span>\\n        </a>\\n      </li>\\n\\n      <li *ngIf=\\\"boundaryLinks\\\" class=\\\"page-item\\\" [class.disabled]=\\\"!hasNext() || disabled\\\">\\n        <a aria-label=\\\"Last\\\" class=\\\"page-link\\\" href (click)=\\\"!!selectPage(pageCount)\\\" [attr.tabindex]=\\\"(hasNext() ? null : '-1')\\\">\\n          <span aria-hidden=\\\"true\\\">&raquo;&raquo;</span>\\n        </a>\\n      </li>\\n    </ul>\\n  \"\n    }]\n  }];\n  /** @nocollapse */\n  NgbPagination.ctorParameters = function () {\n    return [{\n      type: NgbPaginationConfig\n    }];\n  };\n  NgbPagination.propDecorators = {\n    \"disabled\": [{\n      type: Input\n    }],\n    \"boundaryLinks\": [{\n      type: Input\n    }],\n    \"directionLinks\": [{\n      type: Input\n    }],\n    \"ellipses\": [{\n      type: Input\n    }],\n    \"rotate\": [{\n      type: Input\n    }],\n    \"collectionSize\": [{\n      type: Input\n    }],\n    \"maxSize\": [{\n      type: Input\n    }],\n    \"page\": [{\n      type: Input\n    }],\n    \"pageSize\": [{\n      type: Input\n    }],\n    \"pageChange\": [{\n      type: Output\n    }],\n    \"size\": [{\n      type: Input\n    }]\n  };\n  return NgbPagination;\n}();\nexport { NgbPagination };\n//# sourceMappingURL=pagination.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}